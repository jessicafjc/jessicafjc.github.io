<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Express+Mysql搭建接口平台</title>
    <url>/2020/05/22/Express+Mysql%E6%90%AD%E5%BB%BA%E6%8E%A5%E5%8F%A3%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h1><p>前提已经完成node和mysql的搭建和配置</p>
<ol>
<li>安装 Express 应用生成器<code>npm install express-generator -g</code><br> Express 应用生成器 工具可以生成一个 Express 应用的“框架”。可以用 NPM 这样安装它（-g 参数可以把该工具全局安装，那样就可以在任意应用中使用了）</li>
<li>创建一个名为 “helloworld” 的 Express 应用：<code>express helloworld</code><ol>
<li>安装成功后会有三个提示：</li>
<li>change directory:<code>cd helloworld</code></li>
<li>install dependencies:<code>npm install</code></li>
<li>run the app:<code>DEBUG=helloworld:* npm start</code>DEBUG 命令可以展示应用运行时返回的有用的日志信息，本地地址是:<a href="http://localhost:3000/">http://localhost:3000/</a></li>
</ol>
</li>
<li>改写入口文件，将bin下文件改写到app.js<ol>
<li><p>使用的VScode，Teminal–&gt;new Teminal</p>
</li>
<li><p>运行一下<code>node ./bin/www</code>，测试一下没有问题</p>
</li>
<li><p>找到bin–&gt;www下的：<code>var http = require(&#39;http&#39;);</code>和<code>var server = http.createServer(app)</code>,复制到app.js下对应位置</p>
</li>
<li><p>在app.js中，最下方，注释一行，添加一行</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = app;</span></span><br><span class="line">server.listen(&#x27;<span class="number">3000</span>&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>重新运行<code>node app.js</code>即可，测试一下没有问题，可以删除bin文件夹了</p>
</li>
</ol>
</li>
</ol>
<h2 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h2><ol>
<li><p>安装<code>npm install mysql --save</code>，没什么问题</p>
</li>
<li><p>新建文件夹util–&gt;数据库连接文件dbconfig.js</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="attr">config</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//服务器ID，本地为localhost</span></span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,<span class="comment">//端口，默认为3306</span></span><br><span class="line">        <span class="attr">user</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//数据库</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//连接数据库，使用mysql的连接池连接方法</span></span><br><span class="line">    <span class="comment">//连接池对象</span></span><br><span class="line">    <span class="attr">sqlConnect</span>:<span class="keyword">function</span>(<span class="params">sql,sqlArr,callBack</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> pool = mysql.<span class="title function_">createPool</span>(<span class="variable language_">this</span>.<span class="property">config</span>)</span><br><span class="line">        pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err,conn</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//事件驱动回调</span></span><br><span class="line">            conn.<span class="title function_">query</span>(sql,sqlArr,callBack);</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.<span class="title function_">release</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改写文件夹routes下 index.js 文件</p>
 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> dbConfig = require(<span class="string">&#x27;../util/dbconfig&#x27;</span>)</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo&quot;</span>;<span class="comment">//UserInfo为表名</span></span><br><span class="line">  <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">  <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res.render(&#x27;index&#x27;, &#123; title: &#x27;Express&#x27; &#125;);</span></span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行一下<code>node app.js</code>成功获取到sql数据，此时<strong>localhost:3000</strong>显示的为该表下所有数据</p>
</li>
</ol>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>编写调试Node项目,修改代码后,需要频繁的手动close掉,然后再重新启动,非常繁琐。<br>为了调试方便，建议安装一个自动重启工具<code>npm install -g nodemon</code></p>
<h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><p>阿里云服务器更新npm、node之类的版本ssh连接升级会报错，需要使用：<code>npm config set strict-ssl false</code></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.expressjs.com.cn/starter/installing.html">Express中文网</a><br><a href="https://www.bilibili.com/video/BV1A7411N7KZ?p=2">B站教程Node+Express+Mysql搭建API接口平台</a><br><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/#%25E5%258A%259F%25E8%2583%25BD">vue-element-admin By panjiachen</a></p>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>将数据请求的内容全部从index.js移植过来</p>
<ul>
<li>连接数据库：<code>var dbConfig = require(&#39;../util/dbconfig&#39;)</code></li>
<li>请求全部数据<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只显示userID、school</span></span><br><span class="line">getData = <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select userID,school from UserInfo&quot;</span>;<span class="comment">//sql查询语句</span></span><br><span class="line">    <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">    <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.send(&#123;</span><br><span class="line">            <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>传参请求<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传参查询</span></span><br><span class="line">getGender = <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    let &#123;id&#125; = req.query;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo where gender=?&quot;</span>;<span class="comment">//sql查询语句</span></span><br><span class="line">    <span class="keyword">var</span> sqlArr = [id];</span><br><span class="line">    <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;查询失败了&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.send(&#123;</span><br><span class="line">            <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>模块接口，声明对外暴露内容</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    getData,</span><br><span class="line">    getGender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h2><p>在index.js中，注册路由，完整代码如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line">var router = express.Router();</span><br><span class="line"><span class="regexp">//</span>注册路由</span><br><span class="line">var api = require(<span class="string">&#x27;../controllers/api&#x27;</span>);router.get(<span class="string">&#x27;/&#x27;</span>,api.getData);</span><br><span class="line"><span class="regexp">//</span>示例：http:<span class="regexp">//</span>localhost:<span class="number">3000</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getGender&#x27;</span>,api.getGender); </span><br><span class="line"><span class="regexp">//</span>示例：http:<span class="regexp">//</span>localhost:<span class="number">3000</span>/getGender?id=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>实践</tag>
        <tag>MYSQL</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5+JS+CSS与Bmob云后台实践</title>
    <url>/2019/12/02/HTML5+JS+CSS%E4%B8%8EBmob%E4%BA%91%E5%90%8E%E5%8F%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h1><ol>
<li>代码编译器我选择Hbulider X <a href="https://www.dcloud.io/hbuilderx.html">官网下载</a></li>
<li>在Hbuilder新建一个空白项目test_demo，包含index.html、css文件夹、js文件夹、img文件夹</li>
<li>前往Bmob<a href="https://bmob.github.io/hydrogen-js-sdk/#/?id=sdk%25e4%25bd%25bf%25e7%2594%25a8%25e6%2596%2587%25e6%25a1%25a3">官网查看文档</a>并下载对应SDKGitHub<a href="https://github.com/bmob/hydrogen-js-sdk/">源码地址</a></li>
<li>在Bmob的控制台云数据库新建项目、新建表、设计数据结构并导入数据<h1 id="在项目中接入Bmob云数据库"><a href="#在项目中接入Bmob云数据库" class="headerlink" title="在项目中接入Bmob云数据库"></a>在项目中接入Bmob云数据库</h1></li>
<li>引入bmob.js<br>将sdk中的<code>dist/Bmob-2.2.1.min.js</code>导入项目的js文件夹下,在index.html中引入 <code>&lt;script src=&quot;js/dist/Bmob-2.2.1.min.js&quot;&gt;&lt;/script&gt;</code> 新建一个js文件<code>main.js</code></li>
<li>连接对应的bmob数据库<code>Bmob.initialize(&quot;你的Secret Key&quot;, &quot;你的API 安全码&quot;);</code></li>
<li>系统用户表_User<br>获取_User列表内所有数据，因为_User是系统内置用户表，出于隐私安全考虑，密码不可见，且无法用明文方式进行参数传递。<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">query.<span class="built_in">find</span>().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"> 	<span class="built_in">console</span>.<span class="built_in">log</span>(res)</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
判断登陆+本地缓存的方法</li>
</ol>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Bmob.User.login(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//若登陆成功更新用户缓存</span></span><br><span class="line">	Bmob.User.updateStorage(res.objectId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//更新缓存成功，跳转页面</span></span><br><span class="line">		<span class="comment">//跳转到第二个页面-不传参数，href请使用相对路径</span></span><br><span class="line">		window.location.href = <span class="string">&quot;secondPage.html&quot;</span>;</span><br><span class="line">	&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>获取登陆的用户信息</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">current</span> = Bmob.<span class="keyword">User</span>.<span class="keyword">current</span>()</span><br><span class="line">// var data = &#123;&#125;;</span><br><span class="line">var arr = <span class="keyword">Object</span>.keys(<span class="keyword">current</span>);</span><br><span class="line">console.log(arr.length == <span class="number">0</span>) //<span class="keyword">true</span> 为空， <span class="keyword">false</span> 不为空</span><br><span class="line"><span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">	//如果为空,返回登陆页面,防止未登陆用户造成系统崩溃</span><br><span class="line">	<span class="keyword">window</span>.<span class="keyword">location</span>.href = &quot;index.html&quot;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	//如果不为空,则将<span class="keyword">current</span>内的值填入页面内</span><br><span class="line">	console.log(<span class="keyword">current</span>)</span><br><span class="line">	document.getElementById(&quot;username&quot;).innerHTML = <span class="keyword">current</span>.username;</span><br><span class="line">	document.getElementById(&quot;roomNumber&quot;).innerHTML = <span class="keyword">current</span>.roomNumber + <span class="string">&#x27;房间&#x27;</span>;</span><br><span class="line">	var gender = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">current</span>.sex == <span class="number">0</span>) &#123;</span><br><span class="line">		gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		gender = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	document.getElementById(&quot;gender&quot;).innerHTML = gender;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取自创建表TestData内所有数据，并遍历显示在HTML内</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">query.<span class="built_in">find</span>().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(res.<span class="built_in">length</span>)</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; res.<span class="built_in">length</span>; i++) &#123; </span><br><span class="line">	    <span class="built_in">text</span> += res[i].name + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		document.getElementById(<span class="string">&quot;name&quot;</span>).innerHTML = <span class="built_in">text</span>;</span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>按objectId获取对应数据（若为_User此方法不可用，但可以使用内置的Bmob<br>.User.current()方法获取登陆后缓存的用户数据）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(res.name)</span><br><span class="line">	</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>实践</tag>
        <tag>Bmob</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库基础</title>
    <url>/2022/02/24/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li><a href="#redis%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80">Redis 数据基础</a><ul>
<li><a href="#redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4">Redis 通用指令</a><ul>
<li><a href="#1-key%E9%80%9A%E7%94%A8%E6%93%8D%E4%BD%9C">1. key通用操作</a></li>
<li><a href="#2%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4">2. 数据库通用指令</a></li>
</ul>
</li>
<li><a href="#string">String</a><ul>
<li><a href="#1%E9%80%92%E5%A2%9E%E9%80%92%E5%87%8F">1. 递增递减</a></li>
<li><a href="#2%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%95%88%E6%80%A7">2. 数据实效性</a></li>
<li><a href="#3%E7%BB%93%E6%9E%84%E5%9E%8B%E5%92%8C%E9%9D%9E%E7%BB%93%E6%9E%84%E5%9E%8B">3. 结构型和非结构型</a></li>
<li><a href="#4%E7%BB%93%E6%9E%84%E5%9E%8B%E5%92%8C%E9%9D%9E%E7%BB%93%E6%9E%84%E5%9E%8B%E9%AB%98%E7%83%AD%E5%BA%A6%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F">4. 结构型和非结构型高热度访问加速</a></li>
<li><a href="#5-key%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%EF%BC%9A">5. key命名规范：</a></li>
</ul>
</li>
<li><a href="#hash">hash</a><ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
<li><a href="#string%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1%EF%BC%88json%EF%BC%89%E4%B8%8Ehash%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB">string存储对象（JSON）与hash存储对象的区别</a></li>
</ul>
</li>
<li><a href="#list">list</a><ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
</ul>
</li>
<li><a href="#set%E7%B1%BB%E5%9E%8B">set 类型</a><ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
</ul>
</li>
<li><a href="#sorted-set">sorted_set</a><ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Redis-数据基础"><a href="#Redis-数据基础" class="headerlink" title="Redis 数据基础"></a>Redis 数据基础</h1><h2 id="Redis-通用指令"><a href="#Redis-通用指令" class="headerlink" title="Redis 通用指令"></a>Redis 通用指令</h2><h3 id="1-key通用操作"><a href="#1-key通用操作" class="headerlink" title="1. key通用操作"></a>1. key通用操作</h3><ul>
<li><p>删除指定key<br><code>del key</code></p>
</li>
<li><p>获取key是否存在<br><code>exists key</code></p>
</li>
<li><p>获取key的类型<br><code>type key</code></p>
</li>
<li><p>时效性控制</p>
<ul>
<li>为指定key设置有效期<br>  <code>expire key seconds</code><br>  <code>pexpire key milliseconds</code><br>  <code>expireat key timestamp</code><br>  <code>pexpireat key milliseconds-timestamp</code></li>
<li>获取key的剩余有效期<br>  <code>ttl key</code> 返回-2表示数据已过期，key为nil；返回-1表示key存在且未设置有效期<br>  <code>pttl key</code></li>
<li>切换key从时效性转换为永久性<br>  <code>persist key</code></li>
</ul>
</li>
<li><p>查询模型</p>
<ul>
<li>查询key<br>  <img src="/2022/02/24/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/16454333387131.jpg"></li>
</ul>
</li>
<li><p>为key改名 </p>
<ul>
<li><code>rename key newkey</code>  若已有重名，有覆盖风险</li>
<li><code>renamenx key newkey</code> 会先进行检索是否重名</li>
</ul>
</li>
<li><p>对所有key排序 <code>sort 集合性数据</code> 集合性数据，排set、list中的元素</p>
<ul>
<li>仅排序，不对数据进行修改</li>
</ul>
</li>
<li><p>其他可查帮助 <code>help @generic</code></p>
</li>
</ul>
<h3 id="2-数据库通用指令"><a href="#2-数据库通用指令" class="headerlink" title="2. 数据库通用指令"></a>2. 数据库通用指令</h3><ul>
<li>切换数据库 <code>select index</code>index为数据库编号<ul>
<li><code>quit</code> 退出</li>
<li><code>ping</code> 测试是否联通服务器</li>
<li><code>echo message</code></li>
</ul>
</li>
<li>数据移动 <code>move key db[index]</code> 若没有对应数据，或key有重复，移动失败返回0</li>
<li>数据清除<ul>
<li><code>dbsize</code> 返回数据库现存数据总量（key的数量）</li>
<li><code>flushdb</code> 删除当前db[index]</li>
<li><code>flushall</code> 删除全部数据</li>
</ul>
</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="1-递增递减"><a href="#1-递增递减" class="headerlink" title="1. 递增递减"></a>1. 递增递减</h3><h3 id="2-数据实效性"><a href="#2-数据实效性" class="headerlink" title="2. 数据实效性"></a>2. 数据实效性</h3><h3 id="3-结构型和非结构型"><a href="#3-结构型和非结构型" class="headerlink" title="3. 结构型和非结构型"></a>3. 结构型和非结构型</h3><h3 id="4-结构型和非结构型高热度访问加速"><a href="#4-结构型和非结构型高热度访问加速" class="headerlink" title="4. 结构型和非结构型高热度访问加速"></a>4. 结构型和非结构型高热度访问加速</h3><h3 id="5-key命名规范："><a href="#5-key命名规范：" class="headerlink" title="5. key命名规范："></a>5. key命名规范：</h3><p><strong>表名：主键名：主键值：字段名</strong><br>单一存储格式<br><code>set user:id:3124231:fans 123123123</code><br><code>set user:id:1344345:blogs 789</code></p>
<p>JSON格式<br><code>set user:id:00789 &#123;id:00789,blog:789,fans:12343234&#125;</code></p>
<blockquote>
<p>两者皆有优劣，单一存储修改时仅修改单一数据，JSON格式要修改都修改</p>
</blockquote>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>一个存储空间保存多个键值对数据<br>hash类型：底层使用哈希表结构实现数据存储<br>hash类型下的value只能存储字符串，不存在嵌套，若数据未获取到，则对应值为nil<br><img src="/2022/02/24/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/16454081278901.jpg"></p>
<ul>
<li>添加修改<br><code>hset user name zhangsan</code><br><code>hmset user name zhangsan weight 80</code></li>
<li>获取数据<br><code>hgetall user</code><br><code>hget user name</code><br><code>hmget user name weight</code></li>
<li>删除数据<br><code>hdelall user</code><br><code>hdel user name</code></li>
<li>field 数量查询<br><code>hlen user</code></li>
<li>判断是否存在指定字段<br><code>hexits user height</code></li>
<li>获取所有字段名或字段值<br><code>hkeys key</code>（不可能重复）<br><code>hvals key</code>（可能有重复）</li>
<li>设置指定字段的数值数据递增（可指定范围）<br><code>hincrby user age 1</code><br><code>hincrbyfloat user hight 0.5</code><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3></li>
</ul>
<ol>
<li>电商购物车<br><code>hsetnx key field value</code><br>判断是否有该field，有则返回0修改失败，没有则添加value返回1修改成功</li>
<li>商家抢购限购、限量发放、激活码<br><code>hincrby stop001 item001 -1</code><h3 id="string存储对象（JSON）与hash存储对象的区别"><a href="#string存储对象（JSON）与hash存储对象的区别" class="headerlink" title="string存储对象（JSON）与hash存储对象的区别"></a>string存储对象（JSON）与hash存储对象的区别</h3>JSON：整体性，强调读，一次性获取所有<br>hash：单一性，强调改，可单独分割一个个field进行独立操作</li>
</ol>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>一个存储空间保存多个数据，强调顺序，底层使用双向链表存储结构实现<br>保存的数据都是string，总容量有限，2^32-1</p>
<h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li><p>添加修改数据，返回value的数量<br><code>lpush key value1 value2</code><br><code>rpush key value1 value2</code></p>
</li>
<li><p>获取数据，左进右查则为顺<br><code>lrange key star stop</code> 若想查所有，star为 0 stop为 -1<br><code>lindex key index</code>index为索引<br><code>llen key</code> 返回value的数量</p>
</li>
<li><p>获取并移除数据<br><code>lpop key</code><br><code>rpop key</code></p>
</li>
<li><p>规定时间内获取并移除数据<br><code>blpop key1 key2... [timeout]</code> timeout以秒为单位<br><code>brpop key1 key2... [timeout]</code></p>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3></li>
</ul>
<ol>
<li>朋友圈点赞顺序显示好友信息<br><code>lrem key count value</code> 移除指定数据，count为移除个数，value为移除的值</li>
<li>list 进行分页操作，第一页来自list，第二页及更多通过数据库加载</li>
<li>自媒体账号个人用户关注列表按顺序展示，粉丝列表将最新关注放前面</li>
<li>新闻等数据最近发生放前面，最新消息展示</li>
</ol>
<h2 id="set-类型"><a href="#set-类型" class="headerlink" title="set 类型"></a>set 类型</h2><p>存储大量数据，便于查询，可进行同类型数据快速去重<br>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），且<strong>不允许重复</strong><br><img src="/2022/02/24/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/16454249123420.jpg"></p>
<h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>添加<br><code>sadd key membel1 membel2...</code></li>
<li>获取全部<br><code>smembers key</code></li>
<li>删除数据<br><code>srem key menber1 member2...</code></li>
<li>获取集合数据总量<br><code>scard key</code></li>
<li>判断是否包含指定数据<br><code>sismember key member</code></li>
</ul>
<h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>随机推荐可能感兴趣的内容，不重复</li>
</ol>
<ul>
<li>随机获取指定数量的数据<br><code>srandmember key [count]</code></li>
<li>随机获取集合中的某个数据并将该数据移除集合<br><code>spop key</code></li>
</ul>
<ol start="2">
<li>共同关注、共同好友</li>
</ol>
<ul>
<li>集合的交、并、差集<br><code>sinter key1 key2 ...</code><br><code>sunion key1 key2</code><br><code>sdiff key1 key2</code></li>
<li>集合的交、并、差集并存储到指定集合<br><code>sinterstore [key3] key1 key2 ...</code><br><code>sunionstore [key3] key1 key2</code><br><code>sdiffstore [key3] key1 key2</code></li>
<li>将指定数据从原始集合中移动到目标集合中<br><code>smove [原始集合key1] [目标集合kye2] [要移动的数据]</code></li>
</ul>
<ol start="3">
<li>统计网站访问量PV\独立访客UV\独立IP</li>
</ol>
<ul>
<li>pv用string类</li>
<li>uv建立set类型，记录不同cookie数量</li>
<li>ip建立set模型，记录不同ip数量</li>
</ul>
<ol start="4">
<li>黑白名单</li>
</ol>
<h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h2><p>可以保持可排序的数据<br>score是有限度的，64位<br>score的数据是双精度double值，基于双精度浮点数特征，可能丢失精度需注意<br>sorted_set底层存储还是基于set结构，数据不能重复，若添加相同的数据，score将被覆盖，保留最后一次结果</p>
<h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>添加数据<br><code>zadd key [score1] [member1] ....</code></li>
<li>获取数据<br><code>zrange key star stop withscores</code>withscores可以不加，全部遍历可用 0 -1<br><code>zrevrange key star stop</code> score由大到小</li>
<li>删除数据<br><code>zrem key member1 member2 ...</code> 注意不是根据score删除</li>
<li>按条件获取数据<br><code>zrangebyscore key min max withscores limit</code> withscores&#x2F;limit可以不加<br><code>zrerangebyscore key max min withscores limit 0 3</code> limit限制几个，可用于分页 </li>
<li>条件删除数据<br><code>zremrangebyrank key start stop</code><br><code>zremrangebyscore key min max</code></li>
<li>获取集合数据总量<br><code>zcard key</code><br><code>zcount key min max</code></li>
<li>集合交、并操作<br><code>zinterstore [存储集合key3] [进行处理的集合数量] key1 key2 ... </code><br><code>zunionstore [存储集合key3] [进行处理的集合数量] key1 key2 ... </code><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3></li>
</ul>
<ol>
<li>top10排行榜</li>
</ol>
<ul>
<li>获取数据对应索引(排名)<br><code>zrank key member</code><br><code>zrevrank key member</code></li>
<li>score 值获取与修改<br><code>zscore key member</code><br><code>zincrby key increment member</code></li>
</ul>
<ol start="2">
<li>基础服务+增值类服务，需要实效性，如体验式vip，试用期</li>
<li>定期开始投票、讨论、限时进行逾期作废，可用于定时任务执行顺序管理或任务过期管理，建议分段处理</li>
<li>任务权重设置，采用score记录权重</li>
</ol>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow课程建设与教学研讨-南京邮电大学</title>
    <url>/2019/12/15/Tensorflow%E8%AF%BE%E7%A8%8B%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%95%99%E5%AD%A6%E7%A0%94%E8%AE%A8-%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="课程构架"><a href="#课程构架" class="headerlink" title="课程构架"></a>课程构架</h1><ol>
<li>第一讲 人工智能导论</li>
<li>第二讲 环境搭建</li>
<li>第三讲 TensorFlow编程基础</li>
<li>第四讲 线性回归问题——函数回归单一神经元</li>
<li>第五讲 房价预测问题：多元线性回归及TensorFlow编程进阶<ol>
<li>多因素影响如何处理</li>
<li>矩阵向量计算</li>
</ol>
</li>
<li>第六讲 MNIST手写数字识别：分类应用入门<ol>
<li>与线性回归相比，多了一个激活函数</li>
</ol>
</li>
<li>第七讲 MNIST手写数字识别进阶：多层神经网络与应用</li>
<li>第八讲 图像识别问题：卷积神经网络与应用<ol>
<li>CIFAR10（数字“10”代表十分类）</li>
</ol>
</li>
<li>第九讲 Deep Dream：理解深度神经网络结构及应用</li>
<li>第十讲 猫狗大战：迁移学习及应用</li>
<li>第十一讲 泰坦尼克号上的旅客生存概率预测：TensorFlow的高级框架Keras<ol>
<li>使用高级框架</li>
<li>数据处理</li>
</ol>
</li>
<li>第十二讲 电影评论情感分析：RNN循环网络原理及应用<ol>
<li>自然语言的分析</li>
<li>如何将自然语言处理为计算机可处理的数据-词嵌入</li>
<li>模型优化：同义词、近义词、反义词……</li>
</ol>
</li>
<li>第十三讲 FashionMNIST图像生成：生成对抗网原理及应用</li>
<li>第十四讲 鸢尾花品种——网页落地</li>
<li>第十五讲 花卉识别——移动应用落地</li>
<li>第十六讲 课程回顾与大作业<ol>
<li>Final Project以PPT+源代码+多样性展现形式</li>
<li>有展示答辩<h1 id="线下课程实施经验"><a href="#线下课程实施经验" class="headerlink" title="线下课程实施经验"></a>线下课程实施经验</h1></li>
</ol>
</li>
</ol>
<ul>
<li>偏理工科学生兴趣</li>
<li>1、2年级学生修读积极</li>
<li>Talk is cheap, show me the code<h1 id="网课经验"><a href="#网课经验" class="headerlink" title="网课经验"></a>网课经验</h1></li>
<li>网易云课堂、MOOC</li>
<li>人出镜减少工作量</li>
<li>设备：摄像头、背景板、补光、电脑、美颜相机</li>
<li>适时缩放屏幕，突出焦点，以学习体验为本</li>
<li>增加激光笔强调鼠标所在位置</li>
<li>重点内容加字幕提醒</li>
<li>音量比音质更重要</li>
<li>提前进入状态</li>
<li>不一定写出每一句的脚本，做好准备灵活发挥更重要<h1 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h1></li>
<li>教学中设备不要求高</li>
<li>先知识后能力——先能力后知识</li>
<li>需要补充一些相关知识：Python、线性代数、应用开发等<h1 id="讲课要点"><a href="#讲课要点" class="headerlink" title="讲课要点"></a>讲课要点</h1></li>
<li>核心步骤<ul>
<li>训练数据的生成和整理</li>
<li>训练模型的设计和构建</li>
<li>训练模型</li>
<li>优化模型</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>教学研讨</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客实用功能及插件</title>
    <url>/2022/02/24/hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD%E5%8F%8A%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="设置文章目录"><a href="#设置文章目录" class="headerlink" title="设置文章目录"></a>设置文章目录</h1><ol>
<li>打开博客主题配置文件 <strong>themes&#x2F;next&#x2F;_config.yml</strong>，修改 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，不能出现跨级标题结构，否则网页内目录会出问题，详见<a href="https://github.com/iissnan/hexo-theme-next/issues/1259#issuecomment-260565911">这里</a></p>
</blockquote>
<h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1></li>
</ol>
<p>安装<code>npm install --save hexo-blog-encrypt</code><br>将 “password” 字段添加到文章头</p>
<blockquote>
<p>纯数字不好使</p>
</blockquote>
<p>参考文章<br><a href="https://blog.csdn.net/weixin_58068682/article/details/116614622">Hexo博客技巧：对文章进行加密</a></p>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>安装<code>npm install https://github.com/CodeFalling/hexo-asset-image –save</code></p>
<blockquote>
<p>注意这一步一定要使用上面的安装方法，使用官网的代码则会出现保存文件为.com的现象</p>
</blockquote>
<h1 id="hexo-添加live2d看板动画"><a href="#hexo-添加live2d看板动画" class="headerlink" title="hexo 添加live2d看板动画"></a>hexo 添加live2d看板动画</h1><ol>
<li><p>安装<code>npm install --save hexo-helper-live2d</code></p>
</li>
<li><p><a href="https://github.com/xiazeyu/live2d-widget-models.git">下载</a>各种动画model</p>
</li>
<li><p>配置博客站点配置文件，**_config.yml**</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-epsilon2_1</span>  <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span> </span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span>  <span class="comment">#是否在手机进行显示</span></span><br></pre></td></tr></table></figure>
<p>参考文章<br><a href="https://www.jianshu.com/p/3a6342e16e57">hexo 添加live2d看板动画</a></p>
<h1 id="首页不显示全文，显示阅读更多"><a href="#首页不显示全文，显示阅读更多" class="headerlink" title="首页不显示全文，显示阅读更多"></a>首页不显示全文，显示阅读更多</h1></li>
<li><p>打开博客主题配置文件 <strong>themes&#x2F;next&#x2F;_config.yml</strong>，修改<code>excerpt_description: </code>为<code>true</code>，好像现在版本的next主题默认是true</p>
</li>
<li><p>两种方式</p>
<ol>
<li>在需要截断的地方输入 <code>&lt;!--more--&gt;</code></li>
<li>在md开头写摘要 <code>description: 这是显示在首页的概述，正文内容均会被隐藏。</code></li>
</ol>
</li>
<li><p>重启部署即可 <code>hexo clean</code> <code>hexo d -g</code></p>
<h1 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h1><p><del>个人感觉没什么用</del></p>
</li>
<li><p>登录百度统计<a href="https://tongji.baidu.com/">https://tongji.baidu.com</a> 新增网站，添加完毕后到代码获取拿到统计脚本,找到<code>https://hm.baidu.com/hm.js?</code>后面的key值</p>
</li>
<li><p>拿到key后，去到Hexo根目录下的<code>themes\next\</code>，打开 <strong>_config.yml</strong> 文件，找到baidu_analytics，在后面加上key值</p>
</li>
<li><p>然后重新编译，打包上传就可以了 <code>hexo d -g</code></p>
</li>
<li><p>测试，去到百度统计，找到代码安装检查，就可以测试是否添加上去了</p>
<h1 id="LeanCloud阅读次数统计-和-Valine-评论系统"><a href="#LeanCloud阅读次数统计-和-Valine-评论系统" class="headerlink" title="LeanCloud阅读次数统计 和 Valine 评论系统"></a>LeanCloud阅读次数统计 和 Valine 评论系统</h1><h2 id="阅读次数统计次数统计"><a href="#阅读次数统计次数统计" class="headerlink" title="阅读次数统计次数统计"></a>阅读次数统计次数统计</h2></li>
</ol>
<ul>
<li>首先，前往Leancloud<a href="https://console.leancloud.app/apps">官网</a>进行注册，并登陆。</li>
<li>点击创建应用,输入应用的名称(随便起都行), 选择开发版, 点击创建</li>
<li>创建成功后点击右上角的设置小齿轮,点击存储-创建两个 Class<ul>
<li>Class名称设置为<code>Counter</code>(必须为<strong>Counter</strong>)-选择无限制-点击创建</li>
<li>Class名称设置为 <code>Comment</code>(必须为<strong>Comment</strong>)-选择无限制-点击创建（用于添加 Valine 评论系统，如不需要可以不创建该类）</li>
</ul>
</li>
<li>创建后点击设置-点击应用Key-获取App ID和App Key</li>
<li>将获取到的App ID和App Key设置到Next主题配置文件 <strong>_config.yml</strong>,配置文件已存在这个配置, 只要把id和key加上去就好了</li>
<li>点击安全中心, 填写自己博客对应的域名（注意协议、域名和端口号需严格一致）</li>
<li>打开Next主题配置文件 <strong>_config.yml</strong>, 将leancloud_visitors下的security设置为true（如没有则新增）<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span>  <span class="string">//这里其实不需要true，后续设置valine评论系统自带统计，两者取其一为true即可</span></span><br><span class="line">     <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span> <span class="comment"># 同前文的id</span></span><br><span class="line">     <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;&gt;</span> <span class="comment"># 同前文的key</span></span><br><span class="line">     <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">     <span class="attr">security:</span> <span class="literal">true</span></span><br><span class="line">     <span class="comment"># 由于Leancloud免费版的云引擎存在请求线程数和运行时间限制以及休眠机制，</span></span><br><span class="line">     <span class="comment"># 很多时候访客数量加载会很慢。</span></span><br><span class="line">     <span class="comment"># 如果设置betterPerformance为true，</span></span><br><span class="line">     <span class="comment"># 则网页则会在提交请求之前直接显示访客人数为查询到的人数+1，以增加用户体验。</span></span><br><span class="line">     <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h2></li>
</ul>
<p>这是基于LeanCloud的无后端评论系统，所以省略注册和创建Class <code>Comment</code>步骤</p>
<ul>
<li><p>获取到 App ID 和 App key，可以直接用阅读统计的。</p>
</li>
<li><p>编辑<code>themes/next/_config.yml</code> 文件</p>
<ul>
<li>搜索 valine ，配置 appid 和 appkey 为 LeanCloud 分配的值，language 为 zh-cn，注意大小写，只能是小写，否则初始化 Valine 时会报错，导致看不到评论区域。其它选择根据自己的需求修改。</li>
<li>修改 valine.min.js 的 cdn 文件地址，到<a href="https://www.jsdelivr.com/package/npm/valine">这里</a> 选择最新版本的Valine，然后获取cdn地址（复制 url ），修改到 主题配置文件 _config.yml 即可。查找valine：  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span></span><br><span class="line"><span class="comment"># valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.10/Valine.min.js</span></span><br><span class="line"><span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.4.16/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure></li>
<li>查找 valine ：</li>
</ul>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">appid:</span> <span class="string">粘贴id</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">粘贴key</span> </span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier, See: https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎交流讨论...</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mp</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># 这里和上文的 leancloud_visitors 阅读次数统计冲突，建议这里为true上午为false</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># if false, comment count will only be displayed in post page, not in home page</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置禁止留言：在禁止留言的文章或者板块添加comments，并将赋值false</p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-01-28 10:02:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>点击回复不显示评论内容：我把修改后的注释都删掉就好使了</p>
</blockquote>
</li>
</ul>
<p>参考文章<br><a href="https://yuanmomo.net/2019/06/20/hexo-add-valine/">Hexo Next 主题添加 Valine 评论系统</a><br><a href="https://blog.csdn.net/weixin_35009071/article/details/112409778">hexo评论_Hexo博客使用valine评论系统无效果及终极解决方案</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx常用指令</title>
    <url>/2019/11/25/liunx%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul>
<li>查看当前地址<code>pwd</code></li>
<li>查看当前位置内所有文件<code>ls</code></li>
<li>查看当前位置内所有文件及详细信息<code>ls -s</code></li>
<li>前往某地址<code>cd 前往的地址目录</code></li>
<li>回到上一级目录 <code>cd ..</code>回到上上级<code>cd ../..</code></li>
<li>新建文件夹 <code>mkdir</code> 文件夹名</li>
<li>断开连接<code>ctl + c</code></li>
<li>解压<code>.tar</code>到当前位置：<code>tar -zxvf 压缩包名称</code></li>
<li>解压<code>.tar.gz</code>到当前位置：<code>tar xzf xxxxx.tar.gz</code><ul>
<li>到指定目录 <code>tar xzf xxxxx.tar.gz -C 指定目录</code></li>
</ul>
</li>
<li>删除文件夹及旗下所有文件<code>rm -rf 文件夹路径</code></li>
<li>删除文件<code>rm -f 文件路径+文件名.扩展名</code></li>
<li>显示所有打开80端口的进程 <code>lsof -i:80</code>或者<code>netstat -tunlp | grep 80</code><ul>
<li>杀死进程 <code>kill &lt;&lt;pid&gt;&gt;</code></li>
</ul>
</li>
<li>修改权限为可读可写 <code>chmod 777 &lt;&lt;文件名&gt;&gt;</code></li>
</ul>
<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><h2 id="vim几种模式"><a href="#vim几种模式" class="headerlink" title="vim几种模式"></a>vim几种模式</h2><ul>
<li>正常模式：可以使用快捷键命令，或按<code>:</code>输入命令行。</li>
<li>插入模式：可以输入文本，在正常模式下，按<code>i</code>、<code>a</code>、<code>o</code>等都可以进入插入模式。</li>
<li>可视模式：正常模式下按<code>v</code>可以进入可视模式， 在可视模式下，移动光标可以选择文&#96;&#96;本。按<code>v</code>进入可视行模式， 总是整行整行的选中。<code>ctrl+v</code>进入可视块模式。</li>
<li>替换模式：正常模式下，按<code>r</code>进入。</li>
</ul>
<h1 id="vim常用指令"><a href="#vim常用指令" class="headerlink" title="vim常用指令"></a>vim常用指令</h1><ul>
<li>行号显示<code>:set nu</code></li>
<li>关键词查找<code>:/+关键词</code></li>
<li>修改<code>i</code></li>
<li>保存退出<code>:wq</code></li>
<li>在后面的文本中查找<code>/</code></li>
<li><code>?something</code>: 在前面的文本中查找something。</li>
<li><code>/pattern/+number</code>: 将光标停在包含pattern的行后面第number行上。</li>
<li><code>/pattern/-number</code>: 将光标停在包含pattern的行前面第number行上。</li>
<li><code>n</code>: 向后查找下一个。</li>
<li><code>N</code>: 向前查找下一个。</li>
</ul>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift5.0 UI代码Tips</title>
    <url>/2019/12/02/swift5.0-UI%E4%BB%A3%E7%A0%81Tips/</url>
    <content><![CDATA[<blockquote>
<p>记录开发过程中用到的纯代码写UI及一些经验心得<br>记录一些自己写的UI库封装<br>记录一些用过的第三方UI类库</p>
</blockquote>
<h1 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h1><h2 id="label圆角"><a href="#label圆角" class="headerlink" title="label圆角"></a>label圆角</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">label.layer.cornerRadius</span> = <span class="number">5</span><span class="comment">;</span></span><br><span class="line"><span class="attr">label.clipsToBounds</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="按钮类"><a href="#按钮类" class="headerlink" title="按钮类"></a>按钮类</h1><h1 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h1>]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>vue安装及创建新项目</title>
    <url>/2019/11/28/vue%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Vue了解"><a href="#Vue了解" class="headerlink" title="Vue了解"></a>Vue了解</h1><p>渐进式JavaScript 框架</p>
<h1 id="Vue开发环境配置"><a href="#Vue开发环境配置" class="headerlink" title="Vue开发环境配置"></a>Vue开发环境配置</h1><ol>
<li><p>Vue依托nodejs，vue只是node万千包中的一个，所以首先要安装nodejs</p>
</li>
<li><p>查看是否安装node，可以使用<code>node -v</code>版本号查看，若未安装<a href="https://nodejs.org/en/download/">下载地址</a></p>
</li>
<li><p>查看是否安装vue <code>vue -V</code>注意大写</p>
</li>
<li><p>安装Vue <code>npm install -g @vue/cli</code></p>
<ul>
<li>前面加sudo 是获取系统的权限，之后需要输入密码，不加sudo可能因为权限的问题安装失败</li>
<li>如果安装vue出现一些警告和错误，清除一下缓存就行 <code>npm cache clean --force</code></li>
</ul>
</li>
<li><p>3.0以上版本集成了图形界面，所以卸载2.9.6等旧版本的命令：<code>sudo npm uninstall vue-cli -g</code></p>
</li>
</ol>
<h1 id="创建并配置Vue项目"><a href="#创建并配置Vue项目" class="headerlink" title="创建并配置Vue项目"></a>创建并配置Vue项目</h1><p>创建或前往本地文件夹，这里以新创建文件夹 VueProject为例<code>mkdir VueProject</code></p>
<p>创建项目<code>vue create 项目名</code>，项目名必须小写</p>
<blockquote>
<p>3.0以上版本可以直接图形化方式创建项目<code>vue ui</code></p>
</blockquote>
<h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><ol>
<li>前往项目文件夹<code>cd 项目文件夹</code></li>
<li>启动项目<code>npm run serve</code><h2 id="vue的命令"><a href="#vue的命令" class="headerlink" title="vue的命令"></a>vue的命令</h2></li>
</ol>
<ul>
<li>init 从模板生成新项目</li>
<li>list 列出可用的官方模板</li>
<li>build 创建新项目的原型</li>
<li>create 创建（警告：仅用于v3以上版本）</li>
<li>vue ui 启动脚手架图形界面（3.0以上版本）<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2></li>
<li>npm install 安装依赖<ul>
<li><code>npm install mysql</code> &#x2F;&#x2F;连接mysql数据库的依赖</li>
</ul>
</li>
<li><code>npm run dev</code> 或 <code>npm run serve </code>启动项目<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><a href="https://www.jianshu.com/p/167aaf13346c">Mac安装Vue环境——2019-05-11</a><br><a href="https://blog.csdn.net/gcDdblue/article/details/100171824">正确姿势开发vue后台管理系统</a><br><a href="https://www.cnblogs.com/loveyaxin/p/10107550.html">vue-cli 3.x安装配置步骤详细说明</a><br><a href="https://www.cnblogs.com/doit8791/p/5259436.html">CSS预处理器Sass(Scss)、Less、Stylus</a><br><a href="https://blog.csdn.net/xueboren001/article/details/53389221">ESLint深入使用</a><br><a href="https://blog.csdn.net/weixin_34221276/article/details/91423683">一次学会使用 mocha &amp; jest 编写单元测试</a></li>
</ul>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>云ECS+云Redis</title>
    <url>/2022/02/28/%E4%BA%91ECS+%E4%BA%91Redis/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac64443828e137e4e045e1c5c63c0e396fa9dab83427841579e8f8a7717cce88">41b535b75251d982879fbe3234d52c0e7edf87b96aeb0858f7affaeadbed6f66493141bdd7c5389c3da95aa715abc85426e7ef7ccae2694a1bb2d397dfa4b8039990fe5b030ba5896e7375bc79568c57fb079e253343d76251d65ec1cdac1c268c34eef98a51074b5ea9bebcaa8d560f2e6d5d5c20cae534d81c2bdf63e6dc7063b99b8f23cc86e4a6f8d09812cf61c92028bc18c834934d99076299a39f0a195235cb50a844bea179133aa5ec928d3b3f2359d160657a6039a0314458865ae15e33386da775783d8bb5eea9874c8e12d075f185fded95d8828aaba55f3eb6f987908d3cc06bbbf2a94d788a11e6b14e0185a9a567d22271b733fb238afd21cf0300b581487ae32728b70130acbd232dbc537cd9cd6cb76cf3f7b6d93fe9a3b0a4d0dce7fe14f00844f506e2d5e8cf9930298a989e4ba023311fbe0281730c24422b0dccdb3ded3f8dede4fbbd4bb933655b4ca94dda45528cae6ab244d3e28a4c7eb0ebbebf58760766a0ac8b2e0397785aea3304e0f72ab8235fd9fb640598800982de27c6731295b6254028c6f3302ea1eb6fb79393f5e542621b2d23644349fe73c9f6df5f5c3a231efb2d19aa28d3a942e4bcb79441d3353300685c9ef8f367a3c3fffa760f8e97e1bef537f3e5488470a9b76cc8206374dedaf3223385e89f019f1e1c42baa9679d10fdb067607bf98f985ec1109cdeff8671522501738e3b8ac043c3f95c72cf6070dc14d8da5c2b96d5b779356a63f29f3c1ccfae3c0837f2d8d56a3918d58ee7bb1ffff4f148e79cfe031f4a398056be31a1fa06f2964b854e6ef59408886d04feb79c2120cf0d5b761d1ca4c74606d7fc7941f8e97b4518222468700824b2cc92b69a1da36db7bf339475e0bd7f595f1665376d4ef955af4d701a7d47ce0efecddc5786d0d5001d36298fe06c4ee0f47e60bbcde8e74173d1ce4f50d9e4762f6879c39fbc7dfc5612e943b5c714d5529a672c123dcd1bddd71c509249da2908e1242139619ee8b0a463b18630d55affcb09aca5393d001a859f1f381cf5181b13bcd8e04936ab486fab3571cb133fa2dae64830be62621e2501e2a9725ee5fc1fa3c0f157a94679b8288e90a19608f8e7559997d1d86014d9b8556eea6d285842dd0368052048cd3a02b19229f1490d6495f0ce90f53eb4ad627e4e8c768147d9c84247bcec149efe0b9665dcd5d1ef6ad1a2203e225c17d2a9475726ee21816fa5cfeaea912d25a4adf2100893f10099672fe2edfaed4749bad6dc17568fa5c495a8bbb650d4b7f878ed21f9b53a6412f7e60a4d8f2fc9ab5e0a50553667839d006f2d74d4e7d3f14483b0ca5f49ee7107762b46f25814f7428eee92dc0e42a23babddfe79e06f7f4df4241a1082880e5285c09bc97bb8d180f9955ea90b1a8903c1ea021143356b622ecd88cdf6c55eb28e0aa4e959f0e98640a5720932d03fb321fc6790515a80f499405cba3f3e3838e0a145fb1bb3df5e6be40a3d93def3c85208afdb08e461694474f6a4aaf1e69dc883a1e31973e27c5dead090fe162dac5be06c6516fc34a99510b22e658557afe8cb4bd9a2b71acd5218539cf731f1916004b2c53c0172d789ab77c4893f4fffe88ad79bcb6332b0de5eb93b876f5cf413bbf4b611e98cf42cc100fbf43bf4ef5d1fb8893dba359a00f5b857adde44228fe54220814f61be410c66b014e57c1da16e3b4c7f0bed938d824e59b900f9fc2a843c13852b8d640581529bbf4105c1f554bc6df68b8939730270cc056f86adab7c7175f4980005871cfcc64da8bcc0c565f85e28da24c76a291fe041b299a517ceed7b5705b215652b0aaa27170948404cd5ca3403b9886496af820c2b11fcf1abe2ef3990e48e93902b37b357a00ea41306c94bf5cc0285e262cc5ef66dfd1715e38c175e485fdbc42047ca5748ccc7fb5d7ad9cce10f6b06e184c587bb2a8f3b9b34201e17a371a5ced18c486e6664b9d78a5873cd2c21881f67ceb48c42b47728bff8f6fb35248f0bb895d32e0edf8c1a6ea7ca5c58cd21603b6b776aacf1afb9a6fde6c0c6d302412fc37a6ccb8419730a39cc8a8945066cd2a49e87a8b39b8c7f15b55dda8436cdf108748e62c72b1a0a43bcec4bd2a214eca2b6d728ee7e216c336121a96d06401919b6ec27cad5dc6b6ae4b95cf23bc7edee33a2a2413385742a02ab1bc719815e2323777eed49041efbfcd7741e90828c96eb4faf3bc39345c958018083115ab91add854cb129b03019f5a56dc636ae85fbacb1ffb3cd30b9f759669d314c9bf6455df8fc51d9612517fe682315b30d3a2783e0ee636f50933e1355ee9c1a85e1fe3a041c5adbd41073ed96b53d3a5ed69b01941b5654f33afa05c57166d833376601e7228f7bdbdeef5a73298963790c5151936072522dd258d84e394e2d8e3c0647c78edf27cc1243f053839308257419c5eb76bb3472a01bf9448132e9f16c140e7435db7778dba5299964e8fc1931f9664329f86d09560f2df5e27db01fbf04d025ee2204e1fc4c30744efe1050312a111bec66274a59a104440a4d9a0f8ca1649c993e74130c8c685e9233ec23ddd4f7c25c75b89ff101f53b662333ede4ed539286ecbff994823b2461d956d93cace636d07d07fd467f92abef72a45e54755ff5aca3883e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>阿里云</tag>
        <tag>ECS</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始用Koa2+Redis+Mysql搭建API</title>
    <url>/2022/03/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8Koa2+Redis+Mysql%E6%90%AD%E5%BB%BAAPI/</url>
    <content><![CDATA[<h1 id="服务器配置与环境搭建"><a href="#服务器配置与环境搭建" class="headerlink" title="服务器配置与环境搭建"></a>服务器配置与环境搭建</h1><p>服务器选型：最终选择 Alibaba cloud linux<br>远程连接记好自己的密码</p>
<h2 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h2><ul>
<li>从官网中下载对应的安装包<br>  <code>xz -d XX.xz</code>        #.xz解压命令<br>  <code>tar -xvf  XX.tar</code>   #.tar解压命令</li>
<li>添加两个全局软连接，地址酌情替换<br>  <code>ln -s /root/node-v16.14.0-linux-x64/bin/node /usr/local/bin/node   </code><br>  <code>ln -s /root/node-v16.14.0-linux-x64/bin/npm /usr/local/bin/npm   </code></li>
<li>测试一下，能够输出版本号<br>  <code>node -v</code> <h2 id="pm2-安装"><a href="#pm2-安装" class="headerlink" title="pm2 安装"></a>pm2 安装</h2>一个带有负载均衡功能的 Node 应用的进程管理器，用于后台启动项目和管理</li>
<li>全局安装PM2 <code>npm install pm2 -g</code><ul>
<li>可能需要管理员权限<code>sudo npm install pm2 -g</code></li>
</ul>
</li>
<li>使用<code>pm2 list</code>查看运行的项目</li>
<li>使用<code>pm2 start &lt;&lt;项目名称&gt;&gt;</code></li>
<li>使用<code>pm2 stop id</code>停止项目</li>
<li>使用<code>pm2 delete id</code>删除id<h2 id="koa2-安装"><a href="#koa2-安装" class="headerlink" title="koa2 安装"></a>koa2 安装</h2></li>
<li>安装koa <code>npm install koa</code></li>
<li>安装项目生成器 <code>npm install koa-generator -g</code></li>
<li>设置软连接，不设置可能会<strong>koa2: command not found</strong><br>  <code>ln -s /root/node-v16.14.0-linux-x64/bin/koa2 /usr/local/bin</code></li>
</ul>
<h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2><ul>
<li>下载地址：<a href="http://redis.io/download%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%A8%B3%E5%AE%9A%E7%89%88%E6%9C%AC">http://redis.io/download，下载最新稳定版本</a></li>
<li>解压 <code>tar xzf redis-&lt;&lt;对应下载的安装包版本号&gt;&gt;.tar.gz</code></li>
<li>前往该文件夹下 <code>cd redis-&lt;&lt;对应下载的安装包版本号&gt;&gt;</code></li>
<li>编译一下 <code>make</code></li>
<li>安装到指定文件夹 <code>make install PREFIX=/usr/local/redis</code><br><code>cd /usr/local/redis/</code> 使用<code>ll</code>查看是否有<strong>bin</strong>文件</li>
<li>前往<code>cd bin/</code></li>
</ul>
<ol>
<li>服务器端启动（两种方法，建议用后端启动）</li>
</ol>
<ul>
<li>前端启动 <code>./redis-server</code><ul>
<li>正常关闭<code>./redis-cli shutdown</code> 强制关闭 Ctrl+c 可能丢失数据</li>
</ul>
</li>
<li>进行后端启动<br>  需要把redis源码目录下的redis.conf文件复制到redis安装目录的bin目录下<br>  修改redis.conf文件，将daemonize的值改为yes后保存<br>  <code>vim redis.conf</code><br>  按<code>:</code>进入命令行模式，输入<code>/daemonize</code>回车查找<br>  按<code>i</code>进入编辑模式，将<code>no</code>改为<code>yes</code><br>  按<code>:wq</code>保存退出<ul>
<li>后端启动<code>./redis-server redis.conf</code>，不占用窗口，建议使用<br>  检查一下是否成功<code> ps -aux | grep redis</code></li>
<li>正常关闭<code>./redis-cli shutdown</code> 强制关闭<code>kill -9 进程id</code>可能丢失数据</li>
</ul>
</li>
</ul>
<ol>
<li>客户端启动（需先开启服务端）</li>
</ol>
<ul>
<li>本地数据库<code>./redis-cli -h 127.0.0.1 -p 6379</code> 或者</li>
<li>用私有ip启动云Redis<br><code>./redis-cli -h r-uf6lbo0hp2xxeenaxm.redis.rds.aliyuncs.com -p 6379 --raw </code> 替换为自己的ip <strong>xxxx..rds.aliyuncs.com</strong><br>输入账号密码 <code>auth account001:Account001!))</code> 替换为自己的<strong>账号:密码</strong><h2 id="Caddy2-安装"><a href="#Caddy2-安装" class="headerlink" title="Caddy2 安装"></a>Caddy2 安装</h2></li>
</ul>
<ol>
<li>去<a href="https://caddyserver.com/docs/install">官网</a>下载</li>
<li>服务器中新建文件夹 caddy</li>
<li>将下载的二进制文件放置在 caddy&#x2F; 下</li>
<li>前往文件夹内运行<code>./caddy</code> <ol>
<li>设置软连接<code>ln -s /root/caddy/caddy /usr/local/bin</code>可在任意位置进行<code>caddy start</code></li>
<li>输入 <code>caddy &lt;&lt;代码&gt;&gt;</code></li>
</ol>
</li>
<li>新建文件 <code>Caddyfile</code>进行配置</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">80</span> &#123; </span><br><span class="line">	root * ..<span class="regexp">/www/</span></span><br><span class="line">	file_server</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http:<span class="regexp">//</span><span class="number">139.224</span>.<span class="number">62.107</span>:<span class="number">80</span> &#123; <span class="comment">#若不说明http，将默认为https，但目前未进行证书配置，将无法访问</span></span><br><span class="line">	root * ..<span class="regexp">/www/</span> <span class="comment"># 我自己写了个简单的index.html</span></span><br><span class="line">	file_server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>浏览器访问<a href="http://139.224.62.107/">http://139.224.62.107:80</a>，成功访问到<blockquote>
<p>首次运行可能提示权限问题，需要修改权限<code>chmod u+x caddy</code><br>能正常访问的是http，https访问需格外设置ssl证书<br>设置软连接需注意，启动服务器仅在对应位置下启用<strong>Caddyfile</strong>，例如：在&#x2F;usr 下启动caddy，则需配置一个 Caddyfile 在 &#x2F;usr</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/0985644d4fd9">阿里云Linux部署Caddy</a><br><a href="https://www.psvmc.cn/article/2021-02-22-caddy-01.html">Caddy2安装配置</a></p>
<h2 id="Mysql-安装"><a href="#Mysql-安装" class="headerlink" title="Mysql 安装"></a>Mysql 安装</h2></li>
</ol>
<h2 id="Vue-安装"><a href="#Vue-安装" class="headerlink" title="Vue 安装"></a>Vue 安装</h2><h1 id="实现云Redis连接并测试传输数据"><a href="#实现云Redis连接并测试传输数据" class="headerlink" title="实现云Redis连接并测试传输数据"></a>实现云Redis连接并测试传输数据</h1><ol>
<li><p>生成项目 <code>koa2 &lt;&lt;项目名称&gt;&gt;</code> 我这里设置为 testAPI</p>
</li>
<li><p>在项目中新建一个 <strong>db.js</strong></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Redis</span> = <span class="built_in">require</span>(<span class="string">&#x27;ioredis&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> redis = &#123;</span><br><span class="line">   <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">   <span class="attr">host</span>: <span class="string">&#x27;r-uf6lbo0hp2xxeenaxm.redis.rds.aliyuncs.com&#x27;</span>, #私有ip</span><br><span class="line">   <span class="attr">username</span>: <span class="string">&#x27;account001&#x27;</span>,</span><br><span class="line">   <span class="attr">password</span>: <span class="string">&#x27;Account001!))&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newRedis = <span class="keyword">new</span> <span class="title class_">Redis</span>(redis)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = newRedis</span><br></pre></td></tr></table></figure></li>
<li><p>在 <strong>index.js</strong>中测试一下，在index.js传输一个set类型，返回其值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&quot;../dbs/redis&quot;</span>) <span class="comment">// redis.js配置文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ioredis supports all Redis commands:</span></span><br><span class="line">redis.<span class="title function_">set</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>); <span class="comment">// returns promise which resolves to string, &quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the format is: redis[SOME_REDIS_COMMAND_IN_LOWERCASE](ARGUMENTS_ARE_JOINED_INTO_COMMAND_STRING)</span></span><br><span class="line"><span class="comment">// the js: ` redis.set(&quot;mykey&quot;, &quot;Hello&quot;) ` is equivalent to the cli: ` redis&gt; SET mykey &quot;Hello&quot; `</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ioredis supports the node.js callback style</span></span><br><span class="line">redis.<span class="title function_">get</span>(<span class="string">&quot;foo&quot;</span>, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// Promise resolves to &quot;bar&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>运行<code>npm start</code>，成功打印 bar，前往云Redis中查看，成功增加一条数据</p>
</li>
<li><p>关闭项目<code>pkill node</code></p>
</li>
</ol>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/4c51e5a1fcb7">koa2 配置 redis</a><br><a href="https://github.com/luin/ioredis/tree/e4c9d01ecae78e601f6d03df50d92144de67a1b9">Github ioredis</a></p>
<h1 id="使用Swagger生成接口文档"><a href="#使用Swagger生成接口文档" class="headerlink" title="使用Swagger生成接口文档"></a>使用Swagger生成接口文档</h1><p>接续testAPI内容</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>前往<code>cd testAPI</code></li>
<li>安装相关依赖 <code>npm install koa2-swagger-ui swagger-jsdoc --save</code><ol>
<li>koa2-swagger-ui UI视图组件  swagger-jsdoc 识别写的 &#x2F;***&#x2F; 转 json</li>
</ol>
</li>
<li>在项目中新建 <strong>swagger.js</strong>，我放在routes文件夹下，建议后期在根目录下新建util文件夹，放置相关配置文件 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)() <span class="comment">//引入路由函数</span></span><br><span class="line"><span class="keyword">const</span> swaggerJSDoc = <span class="built_in">require</span>(<span class="string">&#x27;swagger-jsdoc&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> swaggerDefinition = &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;网站api借口&#x27;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;API&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">basePath</span>: <span class="string">&#x27;/&#x27;</span> <span class="comment">// Base path (optional)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    swaggerDefinition,</span><br><span class="line">    <span class="attr">apis</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> swaggerSpec = <span class="title function_">swaggerJSDoc</span>(options)</span><br><span class="line"><span class="comment">// 通过路由获取生成的注解文件</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/swagger.json&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = swaggerSpec;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在 app.js 中添加如下代码： <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swagger = <span class="built_in">require</span>(<span class="string">&#x27;./routes/swagger&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; koaSwagger &#125; = <span class="built_in">require</span>(<span class="string">&#x27;koa2-swagger-ui&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(swagger.<span class="title function_">routes</span>(), swagger.<span class="title function_">allowedMethods</span>())</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">koaSwagger</span>(&#123;</span><br><span class="line">    <span class="attr">routePrefix</span>: <span class="string">&#x27;/swagger&#x27;</span>, <span class="comment">// host at /swagger instead of default /docs</span></span><br><span class="line">    <span class="attr">swaggerOptions</span>: &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/swagger.json&#x27;</span>, <span class="comment">// example path to json</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>修改<strong>Caddyfile</strong>，添加如下内容，注意，若需强制<strong>http</strong>访问请加上 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">139.224</span>.<span class="number">62.107</span>:<span class="number">8080</span> &#123; <span class="regexp">//</span><span class="number">8080</span>是随意指定的端口号</span><br><span class="line">	reverse_proxy http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3000</span>  <span class="regexp">//</span>对应swagger.js内的地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动 testAPI 项目<code>npm run start</code></li>
<li>新打开一个终端窗口，启动Caddy <code>caddy start</code></li>
<li>访问 <a href="http://139.224.62.107:8080/swagger">http://139.224.62.107:8080/swagger</a>，成功！</li>
</ol>
<blockquote>
<p>目前，Caddy的反向代理 reverse_proxy 仅支持 地址+端口号<br>注意，若没有https证书，需强调http访问，否则浏览器会因为安全问题拒绝访问（chrome这里是大坑不支持http，最后用Safari成功访问的http）</p>
</blockquote>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/71e4b3920aea">node koa2 swaggerUI 生成接口文档</a></p>
<h2 id="美化文档页面"><a href="#美化文档页面" class="headerlink" title="美化文档页面"></a>美化文档页面</h2><p>参考<a href="https://editor.swagger.io/?_ga=2.132017415.928281264.1596593063-247237175.1594971087">swagger 文档说明</a>（YAML语言）<br>学习YAML语言<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt">教程</a>，了解它与JavaScript语言之间的写法转换</p>
<ol>
<li>新建<strong>apiSwaggerDoc.js</strong>专门用于API文档</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// YAML语法，参考https://editor.swagger.io/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@swagger</span></span></span><br><span class="line"><span class="comment"> * /api/user/&#123;userID&#125;:</span></span><br><span class="line"><span class="comment"> *   get:</span></span><br><span class="line"><span class="comment"> *     summary: 获取用户信息</span></span><br><span class="line"><span class="comment"> *     description: 获取包含积分、是否签到等信息</span></span><br><span class="line"><span class="comment"> *     tags:</span></span><br><span class="line"><span class="comment"> *       - user</span></span><br><span class="line"><span class="comment"> *     parameters:</span></span><br><span class="line"><span class="comment"> *       - name: userID  </span></span><br><span class="line"><span class="comment"> *         in: path</span></span><br><span class="line"><span class="comment"> *         required: true</span></span><br><span class="line"><span class="comment"> *         description: 用户id</span></span><br><span class="line"><span class="comment"> *         type: string</span></span><br><span class="line"><span class="comment"> *     responses:</span></span><br><span class="line"><span class="comment"> *       200:</span></span><br><span class="line"><span class="comment"> *         description: 发布成功</span></span><br><span class="line"><span class="comment"> *       402:</span></span><br><span class="line"><span class="comment"> *          description: 信息填写不全</span></span><br><span class="line"><span class="comment"> *       403:</span></span><br><span class="line"><span class="comment"> *          description: 参数类型错误</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>新建<strong>user.js</strong>在routes内，记得在app.js里注册好路由</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&quot;../dbs/redis&quot;</span>) <span class="comment">// redis.js配置文件路径</span></span><br><span class="line"><span class="keyword">var</span> userID</span><br><span class="line"><span class="keyword">var</span> wallet</span><br><span class="line">router.<span class="title function_">prefix</span>(<span class="string">&#x27;/api/user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">ctx, next</span>) &#123; <span class="comment">//http://localhost:3000/api/user</span></span><br><span class="line">	ctx.<span class="property">body</span> = <span class="string">&#x27;this is a user response!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 提前在数据库中新增一条字符串数据 user:id:1234:wallet  648</span></span><br><span class="line">router</span><br><span class="line">	<span class="comment">// 动态路由</span></span><br><span class="line">	.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">		<span class="comment">// 访问 http://localhost:3000/api/user/1234</span></span><br><span class="line">		<span class="comment">// console.log(ctx.params) // &#123; id: 1234 &#125;</span></span><br><span class="line">		userID = ctx.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">		<span class="keyword">var</span> key = <span class="string">&quot;user:id:&quot;</span> + ctx.<span class="property">params</span>.<span class="property">id</span> + <span class="string">&quot;:wallet&quot;</span> <span class="comment">//与redis的数据key对应</span></span><br><span class="line">		<span class="keyword">const</span> listData = <span class="keyword">await</span> <span class="title function_">getUserWallet</span>(key)</span><br><span class="line">		ctx.<span class="property">body</span> = listData</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//异步的方式获取数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUserWallet</span>(<span class="params">key</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;</span><br><span class="line">		<span class="attr">userID</span>: userID</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">await</span> redis.<span class="title function_">get</span>(key, <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (err) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			data = &#123;</span><br><span class="line">				<span class="attr">userID</span>: userID,</span><br><span class="line">				<span class="attr">wallet</span>: result</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">await</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">	<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>运行<code>node app.js</code>，前往 <a href="http://localhost:3000/swagger">http://localhost:3000/swagger</a> 查看，可以在线测试数据</p>
</li>
</ol>
<blockquote>
<p>在<strong>apiSwaggerDoc.js</strong>中，动态地址的<code>&#123;userID&#125;</code>要与其parameters中的name:<code>userID</code>二者保持一致</p>
</blockquote>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Nginx-安装（不再使用，现已替换为Caddy）"><a href="#Nginx-安装（不再使用，现已替换为Caddy）" class="headerlink" title="Nginx 安装（不再使用，现已替换为Caddy）"></a>Nginx 安装（不再使用，现已替换为Caddy）</h2><ol>
<li><p>前往<a href="http://nginx.org/en/download.html">Nginx 下载</a>下载，本次安装版本为v1.21.6稳定版</p>
</li>
<li><p>解压缩后，切换至新文件夹</p>
</li>
<li><p>运行<code>./configure</code>完成安装</p>
<ol>
<li>建议运行<code>./configure --prefix=/usr/local/nginx</code>指定安装目录</li>
<li>运行<code>make</code>和<code>make install</code></li>
<li>安装完成后生成的安装目录为 <code>/usr/local/nginx</code></li>
<li>nginx主配置文件：**&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf**</li>
<li>nginx日志文件：**&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log**</li>
<li>启动Nginx：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</li>
</ol>
</li>
<li><p>前往阿里云控制台开放端口:</p>
<ol>
<li>控制台→安全→防火墙→添加规则→应用类型选择自定义→端口填2019→确定</li>
</ol>
</li>
<li><p>检查服务器防火墙 <code>firewall-cmd --query-port=80/tcp</code><br> 1. 打开80、433等相应端口<code>firewall-cmd --permanent --add-port=80/tcp</code></p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>重新载入配置，比如添加规则之后，需要执行此命令</span><br><span class="line">firewall-cmd --reload </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>若移除端口<span class="number">666</span></span><br><span class="line">firewall-cmd --permanent --remove-port=<span class="number">666</span>/tcp</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 关闭防火墙命令</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> 开启防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> 关闭 开机自启动</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> 开启 开机启动</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>./configure: error: the HTTP rewrite module requires the PCRE library.</code>,安装pcre-devel解决问题，<code>yum -y install pcre-devel</code><br><code>yum install -y zlib-devel</code></p>
</blockquote>
</li>
<li><p>切换到nginx安装目录中的启动目录下： <code>cd /usr/local/nginx/sbin</code>执行nginx命令：</p>
<ol>
<li>测试配置文件：.&#x2F;nginx -t</li>
<li>启动命令：.&#x2F;nginx</li>
<li>停止命令：.&#x2F;nginx -s stop&#x2F;quit</li>
<li>重启命令：.&#x2F;nginx -s reload</li>
<li>查看进程命令：ps -ef | grep nginx</li>
<li>杀死nginx进程：kill -9 pid（ps命令中查询到的进程id）</li>
</ol>
</li>
<li><p>在浏览器输入 <a href="http://139.224.62.107/">http://139.224.62.107:80</a></p>
</li>
<li><p>设置开机自启动 Nginx</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>阿里云</tag>
        <tag>ECS</tag>
        <tag>Mysql</tag>
        <tag>Caddy2</tag>
      </tags>
  </entry>
  <entry>
    <title>初探koa2</title>
    <url>/2022/02/25/%E5%88%9D%E6%8E%A2koa2/</url>
    <content><![CDATA[<h1 id="koa2-的安装"><a href="#koa2-的安装" class="headerlink" title="koa2 的安装"></a>koa2 的安装</h1><ol>
<li><p>运行<code>npm install koa</code></p>
<p> 新建一个 <code>index.js</code> 测试一下</p>
 <figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="keyword">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.<span class="keyword">use</span>(ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello Koa&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p> 运行下<code>node index.js</code>，访问<a href="http://localhost:3000/">http:localhost:3000</a>查看效果。</p>
</li>
<li><p>安装koa2项目生成器并创建项目</p>
<ol>
<li>npm install koa-generator -g<blockquote>
<p>可能需要sudo 否则权限不足</p>
</blockquote>
</li>
<li>生成项目 <code>koa2 项目名</code> </li>
<li>安装依赖 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目名</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li>启动服务<code>npm start</code>，浏览器输入：localhost:3000,如果页面中展示了如”Hello Koa 2”的内容，说明项目搭建成功。<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1></li>
</ol>
</li>
</ol>
<ul>
<li>在 Koa2 中 GET 传值通过 <code>ctx</code> 或 <code>ctx.request</code> 接收</li>
<li>动态路由传值可通过 <code>ctx.params</code> 接收</li>
<li>query 返回的是格式化好的参数对象</li>
<li>queryString 返回的是请求字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)() <span class="comment">// 引入并实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="comment">// ctx 上下文 context，包含了 request 和 response 等信息</span></span><br><span class="line">router</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻列表&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// get 传值</span></span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newscontent&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newscontent?aid=123&amp;name=zhangsan</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">query</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">query</span>)          <span class="comment">// &#123; aid: &#x27;123&#x27;, name: &#x27;zhangsan&#x27; &#125;   对象</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 动态路由</span></span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newsdetail/:id&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newsdetail/1234</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">params</span>) <span class="comment">// &#123; id: 1234 &#125;</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情 - 动态路由&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 动态路由可以传入多个值</span></span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newsdetail/:aid/:bid&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="comment">// 访问 http://localhost:9000/newsdetail/1234/5678</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">params</span>) <span class="comment">// &#123; aid: 1234, bid: 5678 &#125;</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情 - 动态路由 - 传入多个值&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .<span class="title function_">use</span>(router.<span class="title function_">routes</span>())           <span class="comment">// 启动路由</span></span><br><span class="line">  .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>())   <span class="comment">// router.allowedMethods() 用在路由匹配 router.routes() 之后，所以在当所有路由中间件最后调用，此时根据 ctx.status 设置 response 响应头</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请浏览器打开 http://localhost:9000 或 http://localhost:9000&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="写个简单的测试接口"><a href="#写个简单的测试接口" class="headerlink" title="写个简单的测试接口"></a>写个简单的测试接口</h1></li>
</ul>
<ol>
<li>安装 <code>npm i koa-bodyparser</code></li>
<li>新建一个xxx.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)() <span class="comment">// 引入并实例化</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="comment">// 配置中间件，通过 bodyParser 获取 post 请求传递过来的参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET 接口</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; search &#125; = ctx.<span class="property">query</span></span><br><span class="line">  ctx.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">`新闻标题 1 - <span class="subst">$&#123; search &#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">`新闻标题 2 - <span class="subst">$&#123; search &#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 接口</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/say&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">  ctx.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    <span class="attr">reply</span>: <span class="string">`Hello <span class="subst">$&#123; name &#125;</span>!`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()) <span class="comment">// 启动路由</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on 3000&#x27;</span>)</span><br><span class="line">&#125;) <span class="comment">// 启动服务</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>运行<code>node xxx.js</code>， 访问 <a href="http://localhost:3000/news?search=%E7%A7%91%E6%8A%80">http://localhost:3000/news?search=科技</a> 查看效果</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/koajs/koa">Github koa</a><br><a href="https://www.jianshu.com/p/3e35db2c8d6c">koa2从搭建项目到实现API</a><br><a href="https://liuxianyu.cn/article/learn-koa.html">接触 Koa2 框架</a><br><a href="https://liuxianyu.cn/article/koa-get-post.html">用 Koa2 写 GET、POST 测试接口</a></p>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>koa2</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo个人博客</title>
    <url>/2019/11/25/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）"><a href="#环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）" class="headerlink" title="环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）"></a>环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）</h1><ol>
<li>node.js安装官网</li>
<li>npm或cnpm <code>npm install -g cnpm --registry-https://registry.npm.taobao.org</code></li>
<li>验证版本<code>node -v</code> <code>npm -v</code>或<code>cnpm -v</code></li>
<li>安装hexo <code>cnpm install -g hexo-cli</code></li>
</ol>
<h1 id="创建本地Blog"><a href="#创建本地Blog" class="headerlink" title="创建本地Blog"></a>创建本地Blog</h1><ol>
<li>建立空文件夹作为博客地址，<code>mkdir Blog</code></li>
<li>前往该文件夹 <code>cd Blog/</code></li>
<li>初始化hexo <code>hexo init</code> 这里使用命令创建文件夹是因为我通过<code>cmd + N</code>方式创建文件夹会提示为非空导致无法初始化hexo</li>
<li>启动hexo 服务 <code>hexo s</code> 成功后可访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，使用 <code>ctl+C</code> 结束服务</li>
<li>创建一篇Blog <code>hexo n &quot;文件名&quot;</code>，生成的Blog是markdown格式，会在 source&#x2F;_posts&#x2F; 这个文件夹下</li>
<li>清理缓存<code>hexo clean</code>，生成博客 <code>hexo g</code></li>
<li>本地启动hexo测试效果 <code>hexo s</code></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器配置MYSQL并远程连接</title>
    <url>/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEMYSQL%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="前期操作"><a href="#前期操作" class="headerlink" title="前期操作"></a>前期操作</h1><p>购买好ECS，我这里选择的CentOS<br>远程连接ECS需要配置安全组——自行百度<br>设置SSH密码，例如：首字母大写+生月日星座六位数<br>按步骤安装MYSQL，设置root及其密码，例如：生月日星座六位数</p>
<h1 id="MYSQL语句"><a href="#MYSQL语句" class="headerlink" title="MYSQL语句"></a>MYSQL语句</h1><h2 id="创建-x2F-删除数据库"><a href="#创建-x2F-删除数据库" class="headerlink" title="创建&#x2F;删除数据库"></a>创建&#x2F;删除数据库</h2><p>用root用户创建一个W3CSCHOOL数据库<br><code>mysqladmin -u root -p create W3CSCHOOL</code><br>用root用户删除一个W3CSCHOOL数据库<br><code>mysqladmin -u root -p drop W3CSCHOOL</code><br>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@host]</span># mysql -u root -<span class="selector-tag">p</span></span><br><span class="line">Enter password:******</span><br><span class="line">mysql&gt; use W3CSCHOOL;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>


<h2 id="创建-x2F-删除数据表"><a href="#创建-x2F-删除数据表" class="headerlink" title="创建&#x2F;删除数据表"></a>创建&#x2F;删除数据表</h2><p>创建MySQL数据表需要以下信息：</p>
<ul>
<li><p>表名</p>
</li>
<li><p>表字段名</p>
</li>
<li><p>定义每个表字段</p>
</li>
<li><p>CREATE TABLE table_name (column_name column_type);</p>
</li>
<li><p>如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。</p>
</li>
<li><p>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</p>
</li>
<li><p>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</p>
</li>
<li><p>MySQL命令终止符为分号</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> w3cschool_tbl(</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_author <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> submission_date <span class="type">DATE</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY ( w3cschool_id )</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="数据类型及说明"><a href="#数据类型及说明" class="headerlink" title="数据类型及说明"></a>数据类型及说明</h1><h2 id="常用建表字段"><a href="#常用建表字段" class="headerlink" title="常用建表字段"></a>常用建表字段</h2><p>自增长有0占位的userID：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">`userID` <span class="keyword">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> zerofill NOT <span class="literal">NULL</span> AUTO_INCREMENT,</span><br></pre></td></tr></table></figure>
<p>提交&#x2F;修改时间:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">`submission_date` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>

<p>首次创建时间:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.w3cschool.cn/mysql/mysql-create-database.html">W3C MYSQL教程</a></p>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>实践</tag>
        <tag>MYSQL</tag>
        <tag>后端</tag>
        <tag>阿里云</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习Tensorflow框架安装</title>
    <url>/2019/12/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0Tensorflow%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li><p>查看本机Python版本<code>python -V</code>，我的默认版本是2.7，去Python<a href="https://www.python.org/downloads/macos/">官网下载</a>一个3.7的版本进行安装。</p>
</li>
<li><p>安装完成后，修改默认启动版本为3.7版本</p>
<ul>
<li>打开<code>open ~/.bash_profile</code></li>
<li>添加<code>alias python=&quot;/usr/local/bin/python3.7&quot;</code></li>
<li>不要忘记<code>source ~/.bash_profile</code>重新加载一下</li>
<li>再次<code>python -V</code>发现Python成功变成3.7版本。</li>
</ul>
</li>
<li><p>前往Anaconda<a href="https://www.anaconda.com/">官网</a>下载对应的安装包，进行安装。</p>
</li>
<li><p>安装Tensorflow，先查看是否有<code>conda --version</code>，有可能报错<strong>conda command not found</strong></p>
<ul>
<li><p>先检查anaconda中的bin文件夹内是否有（有）</p>
</li>
<li><p>在<code>vi ~/.zshrc</code>中添加<code>export PATH=/Users/jiachenfu/anaconda3/bin:$PATH</code></p>
</li>
<li><p>然后<code>source ~/.zshrc</code>，检查一下<code>conda --version</code>成功</p>
</li>
<li><p>更改下载源为清华镜像<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code>，然后<code>conda config --set show_channel_urls yes</code></p>
</li>
<li><p>最后安装Tensorflow<code>conda install tensorflow</code></p>
</li>
<li><p>打开Anaconda中的jupyter,新建一个Python3文件,运行</p>
  <figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"><span class="title">tf</span>.__version__</span><br></pre></td></tr></table></figure>

<p>  成功输出1.1.0</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>实践</tag>
        <tag>Tensorflow</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>框架vue-element-admin初探</title>
    <url>/2020/05/20/%E6%A1%86%E6%9E%B6vue-element-admin%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="获取vue-element-admin"><a href="#获取vue-element-admin" class="headerlink" title="获取vue-element-admin"></a>获取vue-element-admin</h1><ol>
<li><p>克隆完整版项目<code>git clone https://github.com/PanJiaChen/vue-element-admin.git</code></p>
</li>
<li><p>进入项目目录<code>cd vue-element-admin</code></p>
</li>
<li><p>安装依赖<code>npm install</code></p>
</li>
<li><p>本地开发 启动项目<code>npm run dev</code><br> 建议下载完整版项目查看演示效果，使用模板项目进行二次修改</p>
<h1 id="搭建接口Express"><a href="#搭建接口Express" class="headerlink" title="搭建接口Express"></a>搭建接口Express</h1></li>
<li><p>安装 Express 应用生成器 <code>npm install express-generator -g</code><br> Express 应用生成器 工具可以生成一个 Express 应用的“框架”。可以用 NPM 这样安装它（-g 参数可以把该工具全局安装，那样就可以在任意应用中使用了）</p>
</li>
<li><p>创建一个名为 “helloworld” 的 Express 应用：<code>express helloworld</code></p>
<ol>
<li>安装成功后会有三个提示：</li>
<li>change directory:<code>cd helloworld</code></li>
<li>install dependencies:<code>npm install</code></li>
<li>run the app:<code>DEBUG=helloworld:* npm start</code>DEBUG 命令可以展示应用运行时返回的有用的日志信息，本地地址是:<a href="http://localhost:3000/">http://localhost:3000/</a></li>
</ol>
</li>
<li><p>改写入口文件，将bin下文件改写到app.js</p>
<ol>
<li><p>使用的VScode，Teminal–&gt;new Teminal</p>
</li>
<li><p>运行一下<code>node ./bin/www</code>，测试一下没有问题</p>
</li>
<li><p>找到bin–&gt;www下的：<code>var http = require(&#39;http&#39;);</code>和<code>var server = http.createServer(app)</code>,复制到app.js下对应位置</p>
</li>
<li><p>在app.js中，最下方，注释一行，添加一行</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = app;</span></span><br><span class="line">server.listen(&#x27;<span class="number">3000</span>&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>重新运行<code>node app.js</code>即可，测试一下没有问题，可以删除bin文件夹了</p>
</li>
</ol>
</li>
<li><p>连接mysql数据库</p>
<ol>
<li><p>安装<code>npm install mysql --save</code>，没什么问题</p>
</li>
<li><p>新建文件夹util–&gt;数据库连接文件dbconfig.js</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="attr">config</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//服务器ID，本地为localhost</span></span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,<span class="comment">//端口，默认为3306</span></span><br><span class="line">        <span class="attr">user</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//数据库</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//连接数据库，使用mysql的连接池连接方法</span></span><br><span class="line">    <span class="comment">//连接池对象</span></span><br><span class="line">    <span class="attr">sqlConnect</span>:<span class="keyword">function</span>(<span class="params">sql,sqlArr,callBack</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> pool = mysql.<span class="title function_">createPool</span>(<span class="variable language_">this</span>.<span class="property">config</span>)</span><br><span class="line">        pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err,conn</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//事件驱动回调</span></span><br><span class="line">            conn.<span class="title function_">query</span>(sql,sqlArr,callBack);</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.<span class="title function_">release</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改写文件夹routes下 index.js 文件</p>
 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> dbConfig = require(<span class="string">&#x27;../util/dbconfig&#x27;</span>)</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo&quot;</span>;<span class="comment">//UserInfo为表名</span></span><br><span class="line">  <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">  <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res.render(&#x27;index&#x27;, &#123; title: &#x27;Express&#x27; &#125;);</span></span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行一下<code>node app.js</code>成功获取到sql数据，此时localhost:3000显示的为该表下所有数据</p>
</li>
</ol>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/#%25E5%258A%259F%25E8%2583%25BD">vue-element-admin By panjiachen</a></p>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云搭建个人云服务器</title>
    <url>/2019/11/27/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="选择服务器系统"><a href="#选择服务器系统" class="headerlink" title="选择服务器系统"></a>选择服务器系统</h1><p>选过CentOS、Alibaba cloud linux</p>
<h1 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>Node官网下载相应包：<a href="https://nodejs.org/en/download/">官网下载</a><br>我这里下载好的，直接上传到服务器：<code>/usr/node</code> 文件夹自己建的<br>到当前文件夹下解压:<code>tar -xvf xxxxxx.tar.xz</code><br>npm和node命令全局生效：<code>vim /ect/profile</code>，修改后<code>source /etc/profile</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set for nodejs</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">NODE_HOME</span>=/usr/node/node-v12.16.3-linux-x64#与文件夹路径对应</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>查看一下版本，检验是否按照成功<code>node -v</code>、<code>npm -v</code><br>本地调试好项目后，上传到服务器上，别忘了添加依赖<code>npm install</code></p>
<blockquote>
<p>注意：阿里云要在安全组里开启 3000 端口</p>
</blockquote>
<h1 id="配置相关环境"><a href="#配置相关环境" class="headerlink" title="配置相关环境"></a>配置相关环境</h1><h2 id="ssh远程连接–-gt-sftp"><a href="#ssh远程连接–-gt-sftp" class="headerlink" title="ssh远程连接–&gt;sftp"></a>ssh远程连接–&gt;sftp</h2><p>配置实例安全组，开放22端口<br>ssh 如果连接不成功，提示<code>ssh_exchange_identification: read: Connection reset by peer</code></p>
<p>解决办法</p>
<ol>
<li>前往本地文件夹<code>/Users/jiachenfu/.ssh/</code>删除<code>known_hosts</code>或改为<code>known_hosts.bak</code>，尝试<code>ssh root@ip</code>是否解决</li>
<li>切换一个网络吧，关闭代理VPN，有的校园网络很坑会连不上</li>
<li>尝试<code>ping ip</code>，如果成功，前往阿里云网页进行远程登录，修改<code>vi /etc/hosts.allow</code>，在末尾添加<code>sshd: ALL ##允许所有ip主机均能连接本机</code>，然后重启<code>systemctl restart sshd.service</code>，尝试<code>ssh root@ip</code>是否解决</li>
<li>查看阿里云实例密钥对是否绑定</li>
</ol>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>

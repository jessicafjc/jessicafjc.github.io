<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tensorflow课程建设与教学研讨-南京邮电大学</title>
    <url>/2019/12/15/Tensorflow%E8%AF%BE%E7%A8%8B%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%95%99%E5%AD%A6%E7%A0%94%E8%AE%A8-%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="课程构架"><a href="#课程构架" class="headerlink" title="课程构架"></a>课程构架</h1><ol>
<li>第一讲 人工智能导论</li>
<li>第二讲 环境搭建</li>
<li>第三讲 TensorFlow编程基础</li>
<li>第四讲 线性回归问题——函数回归单一神经元</li>
<li>第五讲 房价预测问题：多元线性回归及TensorFlow编程进阶<ol>
<li>多因素影响如何处理</li>
<li>矩阵向量计算</li>
</ol>
</li>
<li>第六讲 MNIST手写数字识别：分类应用入门<ol>
<li>与线性回归相比，多了一个激活函数</li>
</ol>
</li>
<li>第七讲 MNIST手写数字识别进阶：多层神经网络与应用</li>
<li>第八讲 图像识别问题：卷积神经网络与应用<ol>
<li>CIFAR10（数字“10”代表十分类）</li>
</ol>
</li>
<li>第九讲 Deep Dream：理解深度神经网络结构及应用</li>
<li>第十讲 猫狗大战：迁移学习及应用</li>
<li>第十一讲 泰坦尼克号上的旅客生存概率预测：TensorFlow的高级框架Keras<ol>
<li>使用高级框架</li>
<li>数据处理</li>
</ol>
</li>
<li>第十二讲 电影评论情感分析：RNN循环网络原理及应用<ol>
<li>自然语言的分析</li>
<li>如何将自然语言处理为计算机可处理的数据-词嵌入</li>
<li>模型优化：同义词、近义词、反义词……</li>
</ol>
</li>
<li>第十三讲 FashionMNIST图像生成：生成对抗网原理及应用</li>
<li>第十四讲 鸢尾花品种——网页落地</li>
<li>第十五讲 花卉识别——移动应用落地</li>
<li>第十六讲 课程回顾与大作业<ol>
<li>Final Project以PPT+源代码+多样性展现形式</li>
<li>有展示答辩<h1 id="线下课程实施经验"><a href="#线下课程实施经验" class="headerlink" title="线下课程实施经验"></a>线下课程实施经验</h1></li>
</ol>
</li>
</ol>
<ul>
<li>偏理工科学生兴趣</li>
<li>1、2年级学生修读积极</li>
<li>Talk is cheap, show me the code<h1 id="网课经验"><a href="#网课经验" class="headerlink" title="网课经验"></a>网课经验</h1></li>
<li>网易云课堂、MOOC</li>
<li>人出镜减少工作量</li>
<li>设备：摄像头、背景板、补光、电脑、美颜相机</li>
<li>适时缩放屏幕，突出焦点，以学习体验为本</li>
<li>增加激光笔强调鼠标所在位置</li>
<li>重点内容加字幕提醒</li>
<li>音量比音质更重要</li>
<li>提前进入状态</li>
<li>不一定写出每一句的脚本，做好准备灵活发挥更重要<h1 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h1></li>
<li>教学中设备不要求高</li>
<li>先知识后能力——先能力后知识</li>
<li>需要补充一些相关知识：Python、线性代数、应用开发等<h1 id="讲课要点"><a href="#讲课要点" class="headerlink" title="讲课要点"></a>讲课要点</h1></li>
<li>核心步骤<ul>
<li>训练数据的生成和整理</li>
<li>训练模型的设计和构建</li>
<li>训练模型</li>
<li>优化模型</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>教学研讨</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Express+Mysql搭建接口平台</title>
    <url>/2020/05/22/Express+Mysql%E6%90%AD%E5%BB%BA%E6%8E%A5%E5%8F%A3%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h1><p>前提已经完成node和mysql的搭建和配置</p>
<ol>
<li><p>安装 Express 应用生成器<code>npm install express-generator -g</code><br> Express 应用生成器 工具可以生成一个 Express 应用的“框架”。可以用 NPM 这样安装它（-g 参数可以把该工具全局安装，那样就可以在任意应用中使用了）</p>
</li>
<li><p>创建一个名为 “helloworld” 的 Express 应用：<code>express helloworld</code></p>
<ol>
<li>安装成功后会有三个提示：</li>
<li>change directory:<code>cd helloworld</code></li>
<li>install dependencies:<code>npm install</code></li>
<li>run the app:<code>DEBUG=helloworld:* npm start</code>DEBUG 命令可以展示应用运行时返回的有用的日志信息，本地地址是:<a href="http://localhost:3000/">http://localhost:3000/</a></li>
</ol>
</li>
<li><p>改写入口文件，将bin下文件改写到app.js</p>
<ol>
<li><p>使用的VScode，Teminal–&gt;new Teminal</p>
</li>
<li><p>运行一下<code>node ./bin/www</code>，测试一下没有问题</p>
</li>
<li><p>找到bin–&gt;www下的：<code>var http = require(&#39;http&#39;);</code>和<code>var server = http.createServer(app)</code>,复制到app.js下对应位置</p>
</li>
<li><p>在app.js中，最下方，注释一行，添加一行</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = app;</span></span><br><span class="line">server.listen(&#x27;<span class="number">3000</span>&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>重新运行<code>node app.js</code>即可，测试一下没有问题，可以删除bin文件夹了</p>
</li>
</ol>
</li>
</ol>
<h2 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h2><ol>
<li>安装<code>npm install mysql --save</code>，没什么问题</li>
<li>新建文件夹util–&gt;数据库连接文件dbconfig.js <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="attr">config</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//服务器ID，本地为localhost</span></span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,<span class="comment">//端口，默认为3306</span></span><br><span class="line">        <span class="attr">user</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//数据库</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//连接数据库，使用mysql的连接池连接方法</span></span><br><span class="line">    <span class="comment">//连接池对象</span></span><br><span class="line">    <span class="attr">sqlConnect</span>:<span class="keyword">function</span>(<span class="params">sql,sqlArr,callBack</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> pool = mysql.<span class="title function_">createPool</span>(<span class="variable language_">this</span>.<span class="property">config</span>)</span><br><span class="line">        pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err,conn</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//事件驱动回调</span></span><br><span class="line">            conn.<span class="title function_">query</span>(sql,sqlArr,callBack);</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.<span class="title function_">release</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>改写文件夹routes下 index.js 文件 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> dbConfig = require(<span class="string">&#x27;../util/dbconfig&#x27;</span>)</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo&quot;</span>;<span class="comment">//UserInfo为表名</span></span><br><span class="line">  <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">  <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res.render(&#x27;index&#x27;, &#123; title: &#x27;Express&#x27; &#125;);</span></span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></li>
<li>运行一下<code>node app.js</code>成功获取到sql数据，此时<strong>localhost:3000</strong>显示的为该表下所有数据</li>
</ol>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>编写调试Node项目,修改代码后,需要频繁的手动close掉,然后再重新启动,非常繁琐。<br>为了调试方便，建议安装一个自动重启工具<code>npm install -g nodemon</code></p>
<h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><p>阿里云服务器更新npm、node之类的版本ssh连接升级会报错，需要使用：<code>npm config set strict-ssl false</code></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.expressjs.com.cn/starter/installing.html">Express中文网</a><br><a href="https://www.bilibili.com/video/BV1A7411N7KZ?p=2">B站教程Node+Express+Mysql搭建API接口平台</a><br><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/#%25E5%258A%259F%25E8%2583%25BD">vue-element-admin By panjiachen</a></p>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>将数据请求的内容全部从index.js移植过来</p>
<ul>
<li>连接数据库：<code>var dbConfig = require(&#39;../util/dbconfig&#39;)</code></li>
<li>请求全部数据<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只显示userID、school</span></span><br><span class="line">getData = <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select userID,school from UserInfo&quot;</span>;<span class="comment">//sql查询语句</span></span><br><span class="line">    <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">    <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.send(&#123;</span><br><span class="line">            <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>传参请求<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传参查询</span></span><br><span class="line">getGender = <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    let &#123;id&#125; = req.query;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo where gender=?&quot;</span>;<span class="comment">//sql查询语句</span></span><br><span class="line">    <span class="keyword">var</span> sqlArr = [id];</span><br><span class="line">    <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;查询失败了&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.send(&#123;</span><br><span class="line">            <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>模块接口，声明对外暴露内容</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    getData,</span><br><span class="line">    getGender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h2><p>在index.js中，注册路由，完整代码如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line">var router = express.Router();</span><br><span class="line"><span class="regexp">//</span>注册路由</span><br><span class="line">var api = require(<span class="string">&#x27;../controllers/api&#x27;</span>);router.get(<span class="string">&#x27;/&#x27;</span>,api.getData);</span><br><span class="line"><span class="regexp">//</span>示例：http:<span class="regexp">//</span>localhost:<span class="number">3000</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getGender&#x27;</span>,api.getGender); </span><br><span class="line"><span class="regexp">//</span>示例：http:<span class="regexp">//</span>localhost:<span class="number">3000</span>/getGender?id=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>实践</tag>
        <tag>MYSQL</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5+JS+CSS与Bmob云后台实践</title>
    <url>/2019/12/02/HTML5+JS+CSS%E4%B8%8EBmob%E4%BA%91%E5%90%8E%E5%8F%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h1><ol>
<li>代码编译器我选择Hbulider X <a href="https://www.dcloud.io/hbuilderx.html">官网下载</a></li>
<li>在Hbuilder新建一个空白项目test_demo，包含index.html、css文件夹、js文件夹、img文件夹</li>
<li>前往Bmob<a href="https://bmob.github.io/hydrogen-js-sdk/#/?id=sdk%25e4%25bd%25bf%25e7%2594%25a8%25e6%2596%2587%25e6%25a1%25a3">官网查看文档</a>并下载对应SDKGitHub<a href="https://github.com/bmob/hydrogen-js-sdk/">源码地址</a></li>
<li>在Bmob的控制台云数据库新建项目、新建表、设计数据结构并导入数据<h1 id="在项目中接入Bmob云数据库"><a href="#在项目中接入Bmob云数据库" class="headerlink" title="在项目中接入Bmob云数据库"></a>在项目中接入Bmob云数据库</h1></li>
<li>引入bmob.js<br>将sdk中的<code>dist/Bmob-2.2.1.min.js</code>导入项目的js文件夹下,在index.html中引入 <code>&lt;script src=&quot;js/dist/Bmob-2.2.1.min.js&quot;&gt;&lt;/script&gt;</code> 新建一个js文件<code>main.js</code></li>
<li>连接对应的bmob数据库<code>Bmob.initialize(&quot;你的Secret Key&quot;, &quot;你的API 安全码&quot;);</code></li>
<li>系统用户表_User<br>获取_User列表内所有数据，因为_User是系统内置用户表，出于隐私安全考虑，密码不可见，且无法用明文方式进行参数传递。<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">query.<span class="built_in">find</span>().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"> 	<span class="built_in">console</span>.<span class="built_in">log</span>(res)</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
判断登陆+本地缓存的方法</li>
</ol>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Bmob.User.login(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//若登陆成功更新用户缓存</span></span><br><span class="line">	Bmob.User.updateStorage(res.objectId).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//更新缓存成功，跳转页面</span></span><br><span class="line">		<span class="comment">//跳转到第二个页面-不传参数，href请使用相对路径</span></span><br><span class="line">		window.location.href = <span class="string">&quot;secondPage.html&quot;</span>;</span><br><span class="line">	&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>获取登陆的用户信息</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">current</span> = Bmob.<span class="keyword">User</span>.<span class="keyword">current</span>()</span><br><span class="line">// var data = &#123;&#125;;</span><br><span class="line">var arr = <span class="keyword">Object</span>.keys(<span class="keyword">current</span>);</span><br><span class="line">console.log(arr.length == <span class="number">0</span>) //<span class="keyword">true</span> 为空， <span class="keyword">false</span> 不为空</span><br><span class="line"><span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">	//如果为空,返回登陆页面,防止未登陆用户造成系统崩溃</span><br><span class="line">	<span class="keyword">window</span>.<span class="keyword">location</span>.href = &quot;index.html&quot;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	//如果不为空,则将<span class="keyword">current</span>内的值填入页面内</span><br><span class="line">	console.log(<span class="keyword">current</span>)</span><br><span class="line">	document.getElementById(&quot;username&quot;).innerHTML = <span class="keyword">current</span>.username;</span><br><span class="line">	document.getElementById(&quot;roomNumber&quot;).innerHTML = <span class="keyword">current</span>.roomNumber + <span class="string">&#x27;房间&#x27;</span>;</span><br><span class="line">	var gender = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">current</span>.sex == <span class="number">0</span>) &#123;</span><br><span class="line">		gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		gender = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	document.getElementById(&quot;gender&quot;).innerHTML = gender;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取自创建表TestData内所有数据，并遍历显示在HTML内</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">query.<span class="built_in">find</span>().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(res.<span class="built_in">length</span>)</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; res.<span class="built_in">length</span>; i++) &#123; </span><br><span class="line">	    <span class="built_in">text</span> += res[i].name + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		document.getElementById(<span class="string">&quot;name&quot;</span>).innerHTML = <span class="built_in">text</span>;</span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>按objectId获取对应数据（若为_User此方法不可用，但可以使用内置的Bmob<br>.User.current()方法获取登陆后缓存的用户数据）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.<span class="built_in">log</span>(res.name)</span><br><span class="line">	</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>实践</tag>
        <tag>Bmob</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客实用功能及插件</title>
    <url>/2022/02/24/hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD%E5%8F%8A%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1><p>安装<code>npm install --save hexo-blog-encrypt</code><br>将 “password” 字段添加到文章头</p>
<blockquote>
<p>纯数字不好使</p>
</blockquote>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/weixin_58068682/article/details/116614622">Hexo博客技巧：对文章进行加密</a></p>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>安装<code>npm install https://github.com/CodeFalling/hexo-asset-image –save</code></p>
<blockquote>
<p>注意这一步一定要使用上面的安装方法，使用官网的代码则会出现保存文件为.com的现象</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift5.0 UI代码Tips</title>
    <url>/2019/12/02/swift5.0-UI%E4%BB%A3%E7%A0%81Tips/</url>
    <content><![CDATA[<blockquote>
<p>记录开发过程中用到的纯代码写UI及一些经验心得<br>记录一些自己写的UI库封装<br>记录一些用过的第三方UI类库</p>
</blockquote>
<h1 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h1><h2 id="label圆角"><a href="#label圆角" class="headerlink" title="label圆角"></a>label圆角</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">label.layer.cornerRadius</span> = <span class="number">5</span><span class="comment">;</span></span><br><span class="line"><span class="attr">label.clipsToBounds</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="按钮类"><a href="#按钮类" class="headerlink" title="按钮类"></a>按钮类</h1><h1 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h1>]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx常用指令</title>
    <url>/2019/11/25/liunx%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul>
<li>查看当前地址<code>pwd</code></li>
<li>查看当前位置内所有文件<code>ls</code></li>
<li>查看当前位置内所有文件及详细信息<code>ls -s</code></li>
<li>前往某地址<code>cd 前往的地址目录</code></li>
<li>回到上一级目录 <code>cd ..</code>回到上上级<code>cd ../..</code></li>
<li>新建文件夹 <code>mkdir</code> 文件夹名</li>
<li>断开连接<code>ctl + c</code></li>
<li>解压到当前位置：<code>tar -zxvf 压缩包名称</code></li>
<li>删除文件夹及旗下所有文件<code>rm -rf 文件夹路径</code></li>
<li>删除文件<code>rm -f 文件路径+文件名.扩展名</code></li>
</ul>
<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><h2 id="vim几种模式"><a href="#vim几种模式" class="headerlink" title="vim几种模式"></a>vim几种模式</h2><ul>
<li>正常模式：可以使用快捷键命令，或按<code>:</code>输入命令行。</li>
<li>插入模式：可以输入文本，在正常模式下，按<code>i</code>、<code>a</code>、<code>o</code>等都可以进入插入模式。</li>
<li>可视模式：正常模式下按<code>v</code>可以进入可视模式， 在可视模式下，移动光标可以选择文``本。按<code>v</code>进入可视行模式， 总是整行整行的选中。<code>ctrl+v</code>进入可视块模式。</li>
<li>替换模式：正常模式下，按<code>r</code>进入。</li>
</ul>
<h1 id="vim常用指令"><a href="#vim常用指令" class="headerlink" title="vim常用指令"></a>vim常用指令</h1><ul>
<li>行号显示<code>:set nu</code></li>
<li>关键词查找<code>:/+关键词</code></li>
<li>修改<code>i</code></li>
<li>保存退出<code>:wq</code></li>
<li>在后面的文本中查找<code>/</code></li>
<li><code>?something</code>: 在前面的文本中查找something。</li>
<li><code>/pattern/+number</code>: 将光标停在包含pattern的行后面第number行上。</li>
<li><code>/pattern/-number</code>: 将光标停在包含pattern的行前面第number行上。</li>
<li><code>n</code>: 向后查找下一个。</li>
<li><code>N</code>: 向前查找下一个。</li>
</ul>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>vue安装及创建新项目</title>
    <url>/2019/11/28/vue%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Vue了解"><a href="#Vue了解" class="headerlink" title="Vue了解"></a>Vue了解</h1><p>渐进式JavaScript 框架</p>
<h1 id="Vue开发环境配置"><a href="#Vue开发环境配置" class="headerlink" title="Vue开发环境配置"></a>Vue开发环境配置</h1><ol>
<li><p>Vue依托nodejs，vue只是node万千包中的一个，所以首先要安装nodejs</p>
</li>
<li><p>查看是否安装node，可以使用<code>node -v</code>版本号查看，若未安装<a href="https://nodejs.org/en/download/">下载地址</a></p>
</li>
<li><p>查看是否安装vue <code>vue -V</code>注意大写</p>
</li>
<li><p>安装Vue <code>npm install -g @vue/cli</code></p>
<ul>
<li>前面加sudo 是获取系统的权限，之后需要输入密码，不加sudo可能因为权限的问题安装失败</li>
<li>如果安装vue出现一些警告和错误，清除一下缓存就行 <code>npm cache clean --force</code></li>
</ul>
</li>
<li><p>3.0以上版本集成了图形界面，所以卸载2.9.6等旧版本的命令：<code>sudo npm uninstall vue-cli -g</code></p>
</li>
</ol>
<h1 id="创建并配置Vue项目"><a href="#创建并配置Vue项目" class="headerlink" title="创建并配置Vue项目"></a>创建并配置Vue项目</h1><p>创建或前往本地文件夹，这里以新创建文件夹 VueProject为例<code>mkdir VueProject</code></p>
<p>创建项目<code>vue create 项目名</code>，项目名必须小写</p>
<blockquote>
<p>3.0以上版本可以直接图形化方式创建项目<code>vue ui</code></p>
</blockquote>
<h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><ol>
<li>前往项目文件夹<code>cd 项目文件夹</code></li>
<li>启动项目<code>npm run serve</code><h2 id="vue的命令"><a href="#vue的命令" class="headerlink" title="vue的命令"></a>vue的命令</h2></li>
</ol>
<ul>
<li>init 从模板生成新项目</li>
<li>list 列出可用的官方模板</li>
<li>build 创建新项目的原型</li>
<li>create 创建（警告：仅用于v3以上版本）</li>
<li>vue ui 启动脚手架图形界面（3.0以上版本）<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2></li>
<li>npm install 安装依赖<ul>
<li><code>npm install mysql</code> //连接mysql数据库的依赖</li>
</ul>
</li>
<li><code>npm run dev</code> 或 <code>npm run serve </code>启动项目<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><a href="https://www.jianshu.com/p/167aaf13346c">Mac安装Vue环境——2019-05-11</a><br><a href="https://blog.csdn.net/gcDdblue/article/details/100171824">正确姿势开发vue后台管理系统</a><br><a href="https://www.cnblogs.com/loveyaxin/p/10107550.html">vue-cli 3.x安装配置步骤详细说明</a><br><a href="https://www.cnblogs.com/doit8791/p/5259436.html">CSS预处理器Sass(Scss)、Less、Stylus</a><br><a href="https://blog.csdn.net/xueboren001/article/details/53389221">ESLint深入使用</a><br><a href="https://blog.csdn.net/weixin_34221276/article/details/91423683">一次学会使用 mocha &amp; jest 编写单元测试</a></li>
</ul>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>初探阿里云ECS+云Redis</title>
    <url>/2022/02/24/%E5%88%9D%E6%8E%A2%E9%98%BF%E9%87%8C%E4%BA%91ECS-%E4%BA%91Redis/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="893e9a9a37f3d53536a32e2d06198d8709638a2d29c45a75f7e23a3ec9ebea15"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>阿里云</tag>
        <tag>ECS</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo个人博客</title>
    <url>/2019/11/25/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）"><a href="#环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）" class="headerlink" title="环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）"></a>环境搭建（现在官网有MacOS安装包，傻瓜操作无需以下步骤）</h1><ol>
<li>node.js安装官网</li>
<li>npm或cnpm <code>npm install -g cnpm --registry-https://registry.npm.taobao.org</code></li>
<li>验证版本<code>node -v</code> <code>npm -v</code>或<code>cnpm -v</code></li>
<li>安装hexo <code>cnpm install -g hexo-cli</code></li>
</ol>
<h1 id="创建本地Blog"><a href="#创建本地Blog" class="headerlink" title="创建本地Blog"></a>创建本地Blog</h1><ol>
<li>建立空文件夹作为博客地址，<code>mkdir Blog</code></li>
<li>前往该文件夹 <code>cd Blog/</code></li>
<li>初始化hexo <code>hexo init</code> 这里使用命令创建文件夹是因为我通过<code>cmd + N</code>方式创建文件夹会提示为非空导致无法初始化hexo</li>
<li>启动hexo 服务 <code>hexo s</code> 成功后可访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，使用 <code>ctl+C</code> 结束服务</li>
<li>创建一篇Blog <code>hexo n &quot;文件名&quot;</code>，生成的Blog是markdown格式，会在 source/_posts/ 这个文件夹下</li>
<li>清理缓存<code>hexo clean</code>，生成博客 <code>hexo g</code></li>
<li>本地启动hexo测试效果 <code>hexo s</code></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器配置MYSQL并远程连接</title>
    <url>/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEMYSQL%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>在阿里云服务器上配置MYSQL数据库，并通过软件进行远程连接和图形化操作</p>
<p>前期操作<br>购买好ECS，我这里选择的CentOS<br>远程连接ECS需要配置安全组——自行百度<br>设置SSH密码首字母大写+生月日星座六位数<br>按步骤安装MYSQL，设置root及其密码生月日星座六位数</p>
<h1 id="MYSQL语句"><a href="#MYSQL语句" class="headerlink" title="MYSQL语句"></a>MYSQL语句</h1><h2 id="创建-删除数据库"><a href="#创建-删除数据库" class="headerlink" title="创建/删除数据库"></a>创建/删除数据库</h2><p>用root用户创建一个W3CSCHOOL数据库<br><code>mysqladmin -u root -p create W3CSCHOOL</code><br>用root用户删除一个W3CSCHOOL数据库<br><code>mysqladmin -u root -p drop W3CSCHOOL</code><br>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@host]</span># mysql -u root -<span class="selector-tag">p</span></span><br><span class="line">Enter password:******</span><br><span class="line">mysql&gt; use W3CSCHOOL;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>


<h2 id="创建-删除数据表"><a href="#创建-删除数据表" class="headerlink" title="创建/删除数据表"></a>创建/删除数据表</h2><p>创建MySQL数据表需要以下信息：</p>
<ul>
<li><p>表名</p>
</li>
<li><p>表字段名</p>
</li>
<li><p>定义每个表字段</p>
</li>
<li><p>CREATE TABLE table_name (column_name column_type);</p>
</li>
<li><p>如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。</p>
</li>
<li><p>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</p>
</li>
<li><p>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</p>
</li>
<li><p>MySQL命令终止符为分号</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> w3cschool_tbl(</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> w3cschool_author <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> submission_date <span class="type">DATE</span>,</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY ( w3cschool_id )</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="数据类型及说明"><a href="#数据类型及说明" class="headerlink" title="数据类型及说明"></a>数据类型及说明</h1><h2 id="常用建表字段"><a href="#常用建表字段" class="headerlink" title="常用建表字段"></a>常用建表字段</h2><p>自增长有0占位的userID：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">`userID` <span class="keyword">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> zerofill NOT <span class="literal">NULL</span> AUTO_INCREMENT,</span><br></pre></td></tr></table></figure>
<p>提交/修改时间:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">`submission_date` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>

<p>首次创建时间:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.w3cschool.cn/mysql/mysql-create-database.html">W3C MYSQL教程</a></p>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>实践</tag>
        <tag>MYSQL</tag>
        <tag>后端</tag>
        <tag>阿里云</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习Tensorflow框架安装</title>
    <url>/2019/12/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0Tensorflow%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li><p>查看本机Python版本<code>python -V</code>，我的默认版本是2.7，去Python<a href="https://www.python.org/downloads/macos/">官网下载</a>一个3.7的版本进行安装。</p>
</li>
<li><p>安装完成后，修改默认启动版本为3.7版本</p>
<ul>
<li>打开<code>open ~/.bash_profile</code></li>
<li>添加<code>alias python=&quot;/usr/local/bin/python3.7&quot;</code></li>
<li>不要忘记<code>source ~/.bash_profile</code>重新加载一下</li>
<li>再次<code>python -V</code>发现Python成功变成3.7版本。</li>
</ul>
</li>
<li><p>前往Anaconda<a href="https://www.anaconda.com/">官网</a>下载对应的安装包，进行安装。</p>
</li>
<li><p>安装Tensorflow，先查看是否有<code>conda --version</code>，有可能报错<strong>conda command not found</strong></p>
<ul>
<li><p>先检查anaconda中的bin文件夹内是否有（有）</p>
</li>
<li><p>在<code>vi ~/.zshrc</code>中添加<code>export PATH=/Users/jiachenfu/anaconda3/bin:$PATH</code></p>
</li>
<li><p>然后<code>source ~/.zshrc</code>，检查一下<code>conda --version</code>成功</p>
</li>
<li><p>更改下载源为清华镜像<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code>，然后<code>conda config --set show_channel_urls yes</code></p>
</li>
<li><p>最后安装Tensorflow<code>conda install tensorflow</code></p>
</li>
<li><p>打开Anaconda中的jupyter,新建一个Python3文件,运行</p>
  <figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"><span class="title">tf</span>.__version__</span><br></pre></td></tr></table></figure>

<p>  成功输出1.1.0</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>AI</tag>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>框架vue-element-admin初探</title>
    <url>/2020/05/20/%E6%A1%86%E6%9E%B6vue-element-admin%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="获取vue-element-admin"><a href="#获取vue-element-admin" class="headerlink" title="获取vue-element-admin"></a>获取vue-element-admin</h1><ol>
<li><p>克隆完整版项目<code>git clone https://github.com/PanJiaChen/vue-element-admin.git</code></p>
</li>
<li><p>进入项目目录<code>cd vue-element-admin</code></p>
</li>
<li><p>安装依赖<code>npm install</code></p>
</li>
<li><p>本地开发 启动项目<code>npm run dev</code><br> 建议下载完整版项目查看演示效果，使用模板项目进行二次修改</p>
<h1 id="搭建接口Express"><a href="#搭建接口Express" class="headerlink" title="搭建接口Express"></a>搭建接口Express</h1></li>
<li><p>安装 Express 应用生成器 <code>npm install express-generator -g</code><br> Express 应用生成器 工具可以生成一个 Express 应用的“框架”。可以用 NPM 这样安装它（-g 参数可以把该工具全局安装，那样就可以在任意应用中使用了）</p>
</li>
<li><p>创建一个名为 “helloworld” 的 Express 应用：<code>express helloworld</code></p>
<ol>
<li>安装成功后会有三个提示：</li>
<li>change directory:<code>cd helloworld</code></li>
<li>install dependencies:<code>npm install</code></li>
<li>run the app:<code>DEBUG=helloworld:* npm start</code>DEBUG 命令可以展示应用运行时返回的有用的日志信息，本地地址是:<a href="http://localhost:3000/">http://localhost:3000/</a></li>
</ol>
</li>
<li><p>改写入口文件，将bin下文件改写到app.js</p>
<ol>
<li><p>使用的VScode，Teminal–&gt;new Teminal</p>
</li>
<li><p>运行一下<code>node ./bin/www</code>，测试一下没有问题</p>
</li>
<li><p>找到bin–&gt;www下的：<code>var http = require(&#39;http&#39;);</code>和<code>var server = http.createServer(app)</code>,复制到app.js下对应位置</p>
</li>
<li><p>在app.js中，最下方，注释一行，添加一行</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = app;</span></span><br><span class="line">server.listen(&#x27;<span class="number">3000</span>&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>重新运行<code>node app.js</code>即可，测试一下没有问题，可以删除bin文件夹了</p>
</li>
</ol>
</li>
<li><p>连接mysql数据库</p>
<ol>
<li><p>安装<code>npm install mysql --save</code>，没什么问题</p>
</li>
<li><p>新建文件夹util–&gt;数据库连接文件dbconfig.js</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="attr">config</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//服务器ID，本地为localhost</span></span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,<span class="comment">//端口，默认为3306</span></span><br><span class="line">        <span class="attr">user</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//密码</span></span><br><span class="line">        <span class="attr">database</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//数据库</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//连接数据库，使用mysql的连接池连接方法</span></span><br><span class="line">    <span class="comment">//连接池对象</span></span><br><span class="line">    <span class="attr">sqlConnect</span>:<span class="keyword">function</span>(<span class="params">sql,sqlArr,callBack</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> pool = mysql.<span class="title function_">createPool</span>(<span class="variable language_">this</span>.<span class="property">config</span>)</span><br><span class="line">        pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err,conn</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//事件驱动回调</span></span><br><span class="line">            conn.<span class="title function_">query</span>(sql,sqlArr,callBack);</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.<span class="title function_">release</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改写文件夹routes下 index.js 文件</p>
 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> dbConfig = require(<span class="string">&#x27;../util/dbconfig&#x27;</span>)</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sql = <span class="string">&quot;select * from UserInfo&quot;</span>;<span class="comment">//UserInfo为表名</span></span><br><span class="line">  <span class="keyword">var</span> sqlArr = [];</span><br><span class="line">  <span class="keyword">var</span> callBack = <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;表连接出错了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span>:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dbConfig.sqlConnect(sql,sqlArr,callBack)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res.render(&#x27;index&#x27;, &#123; title: &#x27;Express&#x27; &#125;);</span></span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></li>
<li><p>运行一下<code>node app.js</code>成功获取到sql数据，此时localhost:3000显示的为该表下所有数据</p>
</li>
</ol>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/#%25E5%258A%259F%25E8%2583%25BD">vue-element-admin By panjiachen</a></p>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云搭建个人云服务器</title>
    <url>/2019/11/27/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="选择服务器系统"><a href="#选择服务器系统" class="headerlink" title="选择服务器系统"></a>选择服务器系统</h1><p>选过CentOS、Alibaba cloud linux</p>
<h1 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>Node官网下载相应包：<a href="https://nodejs.org/en/download/">官网下载</a><br>我这里下载好的，直接上传到服务器：<code>/usr/node</code> 文件夹自己建的<br>到当前文件夹下解压:<code>tar -xvf xxxxxx.tar.xz</code><br>npm和node命令全局生效：<code>vim /ect/profile</code>，修改后<code>source /etc/profile</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set for nodejs</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">NODE_HOME</span>=/usr/node/node-v12.16.3-linux-x64#与文件夹路径对应</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>查看一下版本，检验是否按照成功<code>node -v</code>、<code>npm -v</code><br>本地调试好项目后，上传到服务器上，别忘了添加依赖<code>npm install</code></p>
<blockquote>
<p>注意：阿里云要在安全组里开启 3000 端口</p>
</blockquote>
<h1 id="配置相关环境"><a href="#配置相关环境" class="headerlink" title="配置相关环境"></a>配置相关环境</h1><h2 id="ssh远程连接–-gt-sftp"><a href="#ssh远程连接–-gt-sftp" class="headerlink" title="ssh远程连接–&gt;sftp"></a>ssh远程连接–&gt;sftp</h2><p>配置实例安全组，开放22端口<br>ssh 如果连接不成功，提示<code>ssh_exchange_identification: read: Connection reset by peer</code></p>
<p>解决办法</p>
<ol>
<li>前往本地文件夹<code>/Users/jiachenfu/.ssh/</code>删除<code>known_hosts</code>或改为<code>known_hosts.bak</code>，尝试<code>ssh root@ip</code>是否解决</li>
<li>切换一个网络吧，关闭代理VPN，有的校园网络很坑会连不上</li>
<li>尝试<code>ping ip</code>，如果成功，前往阿里云网页进行远程登录，修改<code>vi /etc/hosts.allow</code>，在末尾添加<code>sshd: ALL ##允许所有ip主机均能连接本机</code>，然后重启<code>systemctl restart sshd.service</code>，尝试<code>ssh root@ip</code>是否解决</li>
<li>查看阿里云实例密钥对是否绑定</li>
</ol>
]]></content>
      <categories>
        <category>散装知识</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>
